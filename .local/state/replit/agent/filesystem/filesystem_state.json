{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}","size_bytes":79},"tailwind.config.js":{"content":"import forms from '@tailwindcss/forms'\nimport animate from 'tailwindcss-animate'\n\n/** @type {import('tailwindcss').Config} */\nexport default {\n    darkMode: [\"class\"],\n    content: [\n    \"./index.html\",\n    \"./src/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n        extend: {\n                colors: {\n                        'primary-green': '#1DB954',\n                        'dark-navy': '#0B1B3C',\n                        teal: '#A6D5D5',\n                        'light-gray': '#F5F6F8',\n                        'muted-gray': '#E5E7EB',\n                        border: 'hsl(var(--border))',\n                        input: 'hsl(var(--input))',\n                        ring: 'hsl(var(--ring))',\n                        background: 'hsl(var(--background))',\n                        foreground: 'hsl(var(--foreground))',\n                        primary: {\n                                DEFAULT: 'hsl(var(--primary))',\n                                foreground: 'hsl(var(--primary-foreground))'\n                        },\n                        secondary: {\n                                DEFAULT: 'hsl(var(--secondary))',\n                                foreground: 'hsl(var(--secondary-foreground))'\n                        },\n                        destructive: {\n                                DEFAULT: 'hsl(var(--destructive))',\n                                foreground: 'hsl(var(--destructive-foreground))'\n                        },\n                        muted: {\n                                DEFAULT: 'hsl(var(--muted))',\n                                foreground: 'hsl(var(--muted-foreground))'\n                        },\n                        accent: {\n                                DEFAULT: 'hsl(var(--accent))',\n                                foreground: 'hsl(var(--accent-foreground))'\n                        },\n                        popover: {\n                                DEFAULT: 'hsl(var(--popover))',\n                                foreground: 'hsl(var(--popover-foreground))'\n                        },\n                        card: {\n                                DEFAULT: 'hsl(var(--card))',\n                                foreground: 'hsl(var(--card-foreground))'\n                        },\n                        chart: {\n                                '1': 'hsl(var(--chart-1))',\n                                '2': 'hsl(var(--chart-2))',\n                                '3': 'hsl(var(--chart-3))',\n                                '4': 'hsl(var(--chart-4))',\n                                '5': 'hsl(var(--chart-5))'\n                        }\n                },\n                borderRadius: {\n                        lg: 'var(--radius)',\n                        md: 'calc(var(--radius) - 2px)',\n                        sm: 'calc(var(--radius) - 4px)'\n                }\n        }\n  },\n  plugins: [forms, animate],\n}","size_bytes":2867},"vite.config.ts":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport { fileURLToPath, URL } from 'node:url'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    host: '0.0.0.0',\n    port: 5000,\n  },\n  resolve: {\n    alias: {\n      '@': fileURLToPath(new URL('./src', import.meta.url)),\n      '@assets': fileURLToPath(new URL('./src/assets', import.meta.url)),\n    },\n  },\n  define: {\n    global: 'globalThis',\n  },\n})","size_bytes":478},"src/App.tsx":{"content":"import { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n\nfunction App() {\n  const [count, setCount] = useState(0)\n  const [inputValue, setInputValue] = useState('')\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-dark-navy mb-4\">\n            StudentDrive MVP\n          </h1>\n          <p className=\"text-lg text-muted-foreground mb-8\">\n            AI-Powered Study Platform\n          </p>\n        </div>\n\n        <div className=\"grid gap-6 max-w-4xl mx-auto\">\n          {/* Component Testing Cards */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-primary\">shadcn/ui Components Test</CardTitle>\n              <CardDescription>\n                Testing shadcn/ui components with StudentDrive brand colors\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex gap-4 items-center\">\n                <Button onClick={() => setCount(count + 1)}>\n                  Primary Button (Count: {count})\n                </Button>\n                <Button variant=\"secondary\">\n                  Secondary Button\n                </Button>\n                <Button variant=\"outline\" className=\"border-teal text-teal\">\n                  Teal Outline\n                </Button>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Test Input</label>\n                <Input\n                  placeholder=\"Type something...\"\n                  value={inputValue}\n                  onChange={(e) => setInputValue(e.target.value)}\n                />\n                {inputValue && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    You typed: {inputValue}\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Brand Colors Preview */}\n          <Card>\n            <CardHeader>\n              <CardTitle>StudentDrive Brand Colors</CardTitle>\n              <CardDescription>\n                Preview of the brand color palette\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"w-full h-12 bg-primary-green rounded-md\"></div>\n                  <p className=\"text-sm font-medium\">Primary Green</p>\n                  <p className=\"text-xs text-muted-foreground\">#1DB954</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"w-full h-12 bg-dark-navy rounded-md\"></div>\n                  <p className=\"text-sm font-medium text-white\">Dark Navy</p>\n                  <p className=\"text-xs text-muted-foreground\">#0B1B3C</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"w-full h-12 bg-teal rounded-md\"></div>\n                  <p className=\"text-sm font-medium\">Teal</p>\n                  <p className=\"text-xs text-muted-foreground\">#A6D5D5</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App","size_bytes":3569},"src/main.tsx":{"content":"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './styles/globals.css'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)","size_bytes":244},"src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"src/services/api.ts":{"content":"// StudentDrive MVP - API Client Service for Laravel Backend Integration\n\nimport axios, { AxiosInstance, AxiosResponse, AxiosError } from 'axios'\nimport {\n  User,\n  Institution,\n  Course,\n  Content,\n  ContentFilters,\n  UploadContentData,\n  ContentRating,\n  Flashcard,\n  Quiz,\n  Summary,\n  MindMap,\n  Exam,\n  CreateExamData,\n  ExamAttempt,\n  ExamResult,\n  LearningPath,\n  CreateLearningPathData,\n  LearningPathTask,\n  SpacedRepetitionItem,\n  SubscriptionPlan,\n  Subscription,\n  PerformanceSummary,\n  AuthResponse,\n  LoginCredentials,\n  RegisterData,\n  OnboardingData,\n  ApiResponse,\n  PaginatedResponse,\n  ExamFilters,\n  UserStats\n} from '@/types/models'\n\n// API Configuration  \nconst API_BASE_URL = (import.meta.env.VITE_API_URL as string) || 'http://localhost:8000'\nconst API_TIMEOUT = 30000 // 30 seconds\n\nclass ApiClient {\n  private client: AxiosInstance\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: API_TIMEOUT,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n    })\n\n    // Request interceptor for adding auth token\n    this.client.interceptors.request.use(\n      (config) => {\n        const token = this.getAuthToken()\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`\n        }\n        return config\n      },\n      (error) => {\n        return Promise.reject(error)\n      }\n    )\n\n    // Response interceptor for handling common responses and errors\n    this.client.interceptors.response.use(\n      (response) => response,\n      (error: AxiosError) => {\n        // Handle common error scenarios\n        if (error.response?.status === 401) {\n          this.clearAuthToken()\n          // Redirect to login or emit auth error event\n          window.location.href = '/auth/login'\n        }\n        \n        if (error.response?.status === 422) {\n          // Validation errors - pass them through\n          return Promise.reject(error)\n        }\n\n        if (error.response && error.response.status >= 500) {\n          console.error('Server error:', error.response.data)\n        }\n\n        return Promise.reject(error)\n      }\n    )\n  }\n\n  // Auth Token Management\n  private getAuthToken(): string | null {\n    return localStorage.getItem('studentdrive_auth_token')\n  }\n\n  private setAuthToken(token: string): void {\n    localStorage.setItem('studentdrive_auth_token', token)\n  }\n\n  private clearAuthToken(): void {\n    localStorage.removeItem('studentdrive_auth_token')\n    localStorage.removeItem('studentdrive_user')\n  }\n\n  // Authentication Endpoints\n  async register(data: RegisterData): Promise<AuthResponse> {\n    const response = await this.client.post<ApiResponse<AuthResponse>>('/api/auth/register', data)\n    const authData = response.data.data\n    this.setAuthToken(authData.token)\n    localStorage.setItem('studentdrive_user', JSON.stringify(authData.user))\n    return authData\n  }\n\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    const response = await this.client.post<ApiResponse<AuthResponse>>('/api/auth/login', credentials)\n    const authData = response.data.data\n    this.setAuthToken(authData.token)\n    localStorage.setItem('studentdrive_user', JSON.stringify(authData.user))\n    return authData\n  }\n\n  async logout(): Promise<void> {\n    try {\n      await this.client.post('/api/auth/logout')\n    } finally {\n      this.clearAuthToken()\n    }\n  }\n\n  async getCurrentUser(): Promise<User> {\n    const response = await this.client.get<ApiResponse<User>>('/api/auth/me')\n    return response.data.data\n  }\n\n  async updateOnboarding(userId: number, data: OnboardingData): Promise<User> {\n    const response = await this.client.put<ApiResponse<User>>(`/api/users/${userId}/onboarding`, data)\n    return response.data.data\n  }\n\n  // Institution Endpoints\n  async getInstitutions(): Promise<Institution[]> {\n    const response = await this.client.get<ApiResponse<Institution[]>>('/api/institutions')\n    return response.data.data\n  }\n\n  async getInstitution(id: number): Promise<Institution> {\n    const response = await this.client.get<ApiResponse<Institution>>(`/api/institutions/${id}`)\n    return response.data.data\n  }\n\n  // Course Endpoints\n  async getCourses(): Promise<Course[]> {\n    const response = await this.client.get<ApiResponse<Course[]>>('/api/courses')\n    return response.data.data\n  }\n\n  async getCourse(id: number): Promise<Course> {\n    const response = await this.client.get<ApiResponse<Course>>(`/api/courses/${id}`)\n    return response.data.data\n  }\n\n  async createCourse(data: FormData): Promise<Course> {\n    const response = await this.client.post<ApiResponse<Course>>('/api/courses', data, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    })\n    return response.data.data\n  }\n\n  // Content Endpoints\n  async getContents(filters?: ContentFilters): Promise<PaginatedResponse<Content>> {\n    const response = await this.client.get<PaginatedResponse<Content>>('/api/contents', {\n      params: filters\n    })\n    return response.data\n  }\n\n  async uploadContent(data: UploadContentData): Promise<Content> {\n    const formData = new FormData()\n    formData.append('title', data.title)\n    formData.append('type', data.type)\n    formData.append('course_id', data.course_id.toString())\n    formData.append('file', data.file)\n    \n    if (data.description) {\n      formData.append('description', data.description)\n    }\n    \n    if (data.metadata) {\n      formData.append('metadata', JSON.stringify(data.metadata))\n    }\n\n    const response = await this.client.post<ApiResponse<Content>>('/api/contents', formData, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    })\n    return response.data.data\n  }\n\n  async getContentDownloadUrl(id: number): Promise<string> {\n    const response = await this.client.get<ApiResponse<{ url: string }>>(`/api/contents/${id}/download`)\n    return response.data.data.url\n  }\n\n  async rateContent(id: number, rating: number, feedback?: string): Promise<ContentRating> {\n    const response = await this.client.post<ApiResponse<ContentRating>>(`/api/contents/${id}/rate`, {\n      rating,\n      feedback\n    })\n    return response.data.data\n  }\n\n  // AI Tools Endpoints\n  async generateFlashcards(contentIds: number[]): Promise<Flashcard[]> {\n    const response = await this.client.post<ApiResponse<{ flashcards: Flashcard[] }>>('/api/ai/flashcards', {\n      content_ids: contentIds\n    })\n    return response.data.data.flashcards\n  }\n\n  async generateQuiz(params: { content_ids?: number[], youtube_url?: string }): Promise<Quiz> {\n    const response = await this.client.post<ApiResponse<{ quiz: Quiz }>>('/api/ai/quiz', params)\n    return response.data.data.quiz\n  }\n\n  async generateSummary(params: { content_id?: number, text?: string }): Promise<Summary> {\n    const response = await this.client.post<ApiResponse<{ summary: Summary }>>('/api/ai/summarize', params)\n    return response.data.data.summary\n  }\n\n  async generateMindmap(contentIds: number[]): Promise<MindMap> {\n    const response = await this.client.post<ApiResponse<{ mindmap: MindMap }>>('/api/ai/mindmap', {\n      content_ids: contentIds\n    })\n    return response.data.data.mindmap\n  }\n\n  // Exam Endpoints\n  async createExam(data: CreateExamData): Promise<{ exam_id: number }> {\n    const response = await this.client.post<ApiResponse<{ exam_id: number }>>('/api/exams', data)\n    return response.data.data\n  }\n\n  async getExam(id: number): Promise<Exam> {\n    const response = await this.client.get<ApiResponse<Exam>>(`/api/exams/${id}`)\n    return response.data.data\n  }\n\n  async getExams(filters?: ExamFilters): Promise<PaginatedResponse<Exam>> {\n    const response = await this.client.get<PaginatedResponse<Exam>>('/api/exams', {\n      params: filters\n    })\n    return response.data\n  }\n\n  async submitExam(examId: number, answers: any[]): Promise<ExamResult> {\n    const response = await this.client.post<ApiResponse<ExamResult>>(`/api/exams/${examId}/submit`, {\n      answers\n    })\n    return response.data.data\n  }\n\n  async getExamAttempts(examId?: number): Promise<ExamAttempt[]> {\n    const url = examId ? `/api/exams/${examId}/attempts` : '/api/exam-attempts'\n    const response = await this.client.get<ApiResponse<ExamAttempt[]>>(url)\n    return response.data.data\n  }\n\n  // Learning Path & Scheduling Endpoints\n  async createLearningPath(data: CreateLearningPathData): Promise<LearningPath> {\n    const response = await this.client.post<ApiResponse<{ schedule: LearningPath }>>('/api/learning-paths', data)\n    return response.data.data.schedule\n  }\n\n  async getLearningPath(id: number): Promise<LearningPath> {\n    const response = await this.client.get<ApiResponse<LearningPath>>(`/api/learning-paths/${id}`)\n    return response.data.data\n  }\n\n  async getLearningPaths(): Promise<LearningPath[]> {\n    const response = await this.client.get<ApiResponse<LearningPath[]>>('/api/learning-paths')\n    return response.data.data\n  }\n\n  async updateTaskStatus(taskId: number, status: string): Promise<LearningPathTask> {\n    const response = await this.client.patch<ApiResponse<LearningPathTask>>(`/api/learning-path-tasks/${taskId}`, {\n      status\n    })\n    return response.data.data\n  }\n\n  // Spaced Repetition Endpoints\n  async getReviewQueue(): Promise<SpacedRepetitionItem[]> {\n    const response = await this.client.get<ApiResponse<SpacedRepetitionItem[]>>('/api/spaced-repetition/queue')\n    return response.data.data\n  }\n\n  async reviewItem(itemId: number, quality: number): Promise<SpacedRepetitionItem> {\n    const response = await this.client.post<ApiResponse<SpacedRepetitionItem>>(`/api/spaced-repetition/${itemId}/review`, {\n      quality\n    })\n    return response.data.data\n  }\n\n  // Subscription Endpoints\n  async getSubscriptionPlans(): Promise<SubscriptionPlan[]> {\n    const response = await this.client.get<ApiResponse<SubscriptionPlan[]>>('/api/subscriptions/plans')\n    return response.data.data\n  }\n\n  async createSubscription(planId: string, paymentToken: string): Promise<Subscription> {\n    const response = await this.client.post<ApiResponse<Subscription>>('/api/subscriptions', {\n      plan_id: planId,\n      payment_token: paymentToken\n    })\n    return response.data.data\n  }\n\n  async getCurrentSubscription(): Promise<Subscription | null> {\n    try {\n      const response = await this.client.get<ApiResponse<Subscription>>('/api/subscriptions/current')\n      return response.data.data\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response?.status === 404) {\n        return null\n      }\n      throw error\n    }\n  }\n\n  async cancelSubscription(): Promise<void> {\n    await this.client.delete('/api/subscriptions/current')\n  }\n\n  // Dashboard & Analytics Endpoints\n  async getDashboardSummary(): Promise<PerformanceSummary> {\n    const response = await this.client.get<ApiResponse<PerformanceSummary>>('/api/dashboard/summary')\n    return response.data.data\n  }\n\n  async getUserStats(): Promise<UserStats> {\n    const response = await this.client.get<ApiResponse<UserStats>>('/api/users/stats')\n    return response.data.data\n  }\n\n  // File Upload Helper\n  async uploadFile(file: File, type: 'avatar' | 'content' | 'document' = 'content'): Promise<string> {\n    const formData = new FormData()\n    formData.append('file', file)\n    formData.append('type', type)\n\n    const response = await this.client.post<ApiResponse<{ url: string }>>('/api/upload', formData, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    })\n    return response.data.data.url\n  }\n\n  // Search Endpoints\n  async searchContent(query: string, filters?: ContentFilters): Promise<Content[]> {\n    const response = await this.client.get<ApiResponse<Content[]>>('/api/search/contents', {\n      params: { q: query, ...filters }\n    })\n    return response.data.data\n  }\n\n  async searchInstitutions(query: string): Promise<Institution[]> {\n    const response = await this.client.get<ApiResponse<Institution[]>>('/api/search/institutions', {\n      params: { q: query }\n    })\n    return response.data.data\n  }\n\n  // Health Check\n  async healthCheck(): Promise<boolean> {\n    try {\n      const response = await this.client.get('/api/health')\n      return response.status === 200\n    } catch (error) {\n      console.error('Health check failed:', error)\n      return false\n    }\n  }\n}\n\n// Create and export singleton instance\nexport const apiClient = new ApiClient()\n\n// Export individual API methods for easier importing\nexport const {\n  // Auth\n  register,\n  login,\n  logout,\n  getCurrentUser,\n  updateOnboarding,\n  \n  // Institutions & Courses\n  getInstitutions,\n  getInstitution,\n  getCourses,\n  getCourse,\n  createCourse,\n  \n  // Content\n  getContents,\n  uploadContent,\n  getContentDownloadUrl,\n  rateContent,\n  \n  // AI Tools\n  generateFlashcards,\n  generateQuiz,\n  generateSummary,\n  generateMindmap,\n  \n  // Exams\n  createExam,\n  getExam,\n  getExams,\n  submitExam,\n  getExamAttempts,\n  \n  // Learning Paths\n  createLearningPath,\n  getLearningPath,\n  getLearningPaths,\n  updateTaskStatus,\n  \n  // Spaced Repetition\n  getReviewQueue,\n  reviewItem,\n  \n  // Subscriptions\n  getSubscriptionPlans,\n  createSubscription,\n  getCurrentSubscription,\n  cancelSubscription,\n  \n  // Dashboard\n  getDashboardSummary,\n  getUserStats,\n  \n  // Utilities\n  uploadFile,\n  searchContent,\n  searchInstitutions,\n  healthCheck\n} = apiClient\n\nexport default apiClient","size_bytes":13457},"src/styles/globals.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --primary-green: #1DB954;\n  --dark-navy: #0B1B3C;\n  --teal: #A6D5D5;\n  --white: #FFFFFF;\n  --light-gray: #F5F6F8;\n  --muted-gray: #E5E7EB;\n  --black: #000000;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground;\n  }\n  :root {\n    --background: 220 14% 97%;\n    --foreground: 0 0% 0%;\n    --card: 0 0% 100%;\n    --card-foreground: 0 0% 0%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 0 0% 0%;\n    --primary: 141 73% 42%;\n    --primary-foreground: 0 0% 100%;\n    --secondary: 180 34% 74%;\n    --secondary-foreground: 218 58% 14%;\n    --muted: 210 16% 90%;\n    --muted-foreground: 220 9% 46%;\n    --accent: 220 14% 97%;\n    --accent-foreground: 218 58% 14%;\n    --destructive: 0 84% 60%;\n    --destructive-foreground: 0 0% 100%;\n    --border: 210 16% 90%;\n    --input: 210 16% 90%;\n    --ring: 141 73% 42%;\n    --chart-1: 141 73% 42%;\n    --chart-2: 180 34% 74%;\n    --chart-3: 218 58% 14%;\n    --chart-4: 220 14% 97%;\n    --chart-5: 210 16% 90%;\n    --radius: 0.5rem;\n  }\n  .dark {\n    --background: 0 0% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 0 0% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 0 0% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 0 0% 9%;\n    --secondary: 0 0% 14.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 0 0% 14.9%;\n    --muted-foreground: 0 0% 63.9%;\n    --accent: 0 0% 14.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 14.9%;\n    --input: 0 0% 14.9%;\n    --ring: 0 0% 83.1%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n}","size_bytes":1829},"src/types/models.ts":{"content":"// StudentDrive MVP - TypeScript Interfaces for Laravel Backend Integration\n\nexport interface User {\n  id: number\n  name: string\n  email: string\n  email_verified_at?: string\n  role: 'student' | 'institution' | 'admin'\n  avatar?: string\n  created_at: string\n  updated_at: string\n  \n  // Onboarding fields\n  program?: string\n  institution_id?: number\n  level?: 'undergraduate' | 'graduate' | 'professional'\n  discovered_via?: string\n  goals?: string[]\n  onboarding_completed_at?: string\n}\n\nexport interface Institution {\n  id: number\n  name: string\n  slug: string\n  country: string\n  city?: string\n  logo?: string\n  website?: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface Course {\n  id: number\n  name: string\n  code?: string\n  description?: string\n  institution_id: number\n  institution?: Institution\n  cover_image?: string\n  created_at: string\n  updated_at: string\n  contents_count?: number\n}\n\nexport interface Content {\n  id: number\n  title: string\n  type: 'notes' | 'past-exams' | 'questions' | 'video' | 'document'\n  description?: string\n  file_path: string\n  file_url?: string\n  file_size?: number\n  file_type?: string\n  thumbnail?: string\n  course_id: number\n  course?: Course\n  uploader_id: number\n  uploader?: User\n  downloads_count: number\n  average_rating: number\n  ratings_count: number\n  is_verified: boolean\n  metadata?: Record<string, any>\n  created_at: string\n  updated_at: string\n}\n\nexport interface ContentRating {\n  id: number\n  content_id: number\n  user_id: number\n  rating: number\n  feedback?: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface Flashcard {\n  id: number\n  question: string\n  answer: string\n  explanation?: string\n  difficulty: 'easy' | 'medium' | 'hard'\n  tags?: string[]\n  content_id?: number\n  user_id: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface Quiz {\n  id: number\n  title: string\n  description?: string\n  questions: QuizQuestion[]\n  time_limit?: number\n  user_id: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface QuizQuestion {\n  id: number\n  question: string\n  type: 'multiple-choice' | 'true-false' | 'short-answer'\n  options?: string[]\n  correct_answer: string | number\n  explanation?: string\n  points: number\n}\n\nexport interface Exam {\n  id: number\n  title: string\n  description?: string\n  duration: number // in minutes\n  question_count: number\n  topics?: string[]\n  difficulty: 'easy' | 'medium' | 'hard' | 'mixed'\n  settings: ExamSettings\n  questions: ExamQuestion[]\n  user_id: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface ExamSettings {\n  shuffle_questions: boolean\n  shuffle_options: boolean\n  show_results_immediately: boolean\n  allow_review: boolean\n  auto_submit: boolean\n}\n\nexport interface ExamQuestion {\n  id: number\n  question: string\n  type: 'multiple-choice' | 'true-false' | 'essay'\n  options?: string[]\n  correct_answer: string | number\n  explanation?: string\n  points: number\n  topic?: string\n}\n\nexport interface ExamAttempt {\n  id: number\n  exam_id: number\n  exam?: Exam\n  user_id: number\n  user?: User\n  answers: ExamAnswer[]\n  score: number\n  max_score: number\n  percentage: number\n  time_taken: number // in seconds\n  started_at: string\n  completed_at?: string\n  status: 'in-progress' | 'completed' | 'abandoned'\n}\n\nexport interface ExamAnswer {\n  question_id: number\n  answer: string | number | string[]\n  is_correct: boolean\n  points_earned: number\n}\n\nexport interface ExamResult {\n  attempt: ExamAttempt\n  score: number\n  max_score: number\n  percentage: number\n  time_taken: number\n  breakdown: {\n    correct_answers: number\n    incorrect_answers: number\n    unanswered: number\n    by_topic: Record<string, {\n      correct: number\n      total: number\n      percentage: number\n    }>\n  }\n  weak_topics: string[]\n  recommendations: string[]\n}\n\nexport interface LearningPath {\n  id: number\n  title: string\n  description?: string\n  target_date: string\n  daily_hours: number\n  topics: string[]\n  schedule: LearningPathTask[]\n  progress: number // 0-100\n  user_id: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface LearningPathTask {\n  id: number\n  title: string\n  description?: string\n  type: 'study' | 'practice' | 'review' | 'exam'\n  estimated_duration: number // in minutes\n  due_date: string\n  completed_at?: string\n  content_ids?: number[]\n  status: 'pending' | 'in-progress' | 'completed' | 'overdue'\n}\n\nexport interface SpacedRepetitionItem {\n  id: number\n  content_id: number\n  content?: Content\n  user_id: number\n  ease_factor: number\n  interval: number // in days\n  repetitions: number\n  quality: number // last quality rating (0-5)\n  next_review_date: string\n  last_reviewed_at?: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface Subscription {\n  id: number\n  user_id: number\n  plan_id: string\n  status: 'active' | 'inactive' | 'cancelled' | 'expired'\n  current_period_start: string\n  current_period_end: string\n  stripe_subscription_id?: string\n  stripe_customer_id?: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface SubscriptionPlan {\n  id: string\n  name: string\n  description: string\n  price: number\n  currency: string\n  interval: 'month' | 'year'\n  features: string[]\n  limits: {\n    uploads_per_month?: number\n    ai_requests_per_month?: number\n    storage_gb?: number\n  }\n  is_popular?: boolean\n  stripe_price_id?: string\n}\n\nexport interface MindMapNode {\n  id: string\n  label: string\n  type: 'root' | 'branch' | 'leaf'\n  position: { x: number; y: number }\n  data: {\n    content?: string\n    color?: string\n    size?: number\n  }\n  children?: string[] // IDs of child nodes\n}\n\nexport interface MindMap {\n  id: number\n  title: string\n  description?: string\n  nodes: MindMapNode[]\n  edges: MindMapEdge[]\n  user_id: number\n  content_ids?: number[]\n  created_at: string\n  updated_at: string\n}\n\nexport interface MindMapEdge {\n  id: string\n  source: string\n  target: string\n  type?: string\n  animated?: boolean\n}\n\nexport interface PerformanceSummary {\n  strengths: string[]\n  weaknesses: string[]\n  time_spent: {\n    total_hours: number\n    this_week: number\n    daily_average: number\n  }\n  readiness: {\n    overall: number // 0-100\n    by_topic: Record<string, number>\n  }\n  recent_activity: ActivityItem[]\n  recommendations: string[]\n}\n\nexport interface ActivityItem {\n  id: number\n  type: 'upload' | 'download' | 'study' | 'exam' | 'flashcard' | 'quiz'\n  title: string\n  description?: string\n  score?: number\n  duration?: number\n  created_at: string\n}\n\nexport interface Summary {\n  id: number\n  title: string\n  content: string\n  key_points: string[]\n  word_count: number\n  reading_time: number // in minutes\n  source_content_id?: number\n  user_id: number\n  created_at: string\n  updated_at: string\n}\n\n// API Response Types\nexport interface ApiResponse<T> {\n  data: T\n  message?: string\n  status: number\n}\n\nexport interface PaginatedResponse<T> {\n  data: T[]\n  meta: {\n    current_page: number\n    last_page: number\n    per_page: number\n    total: number\n  }\n  links: {\n    first?: string\n    last?: string\n    prev?: string\n    next?: string\n  }\n}\n\nexport interface AuthResponse {\n  user: User\n  token: string\n  expires_at: string\n}\n\nexport interface LoginCredentials {\n  email: string\n  password: string\n  remember_me?: boolean\n}\n\nexport interface RegisterData {\n  name: string\n  email: string\n  password: string\n  password_confirmation: string\n}\n\nexport interface OnboardingData {\n  program: string\n  institution_id: number\n  level: 'undergraduate' | 'graduate' | 'professional'\n  discovered_via: string\n  goals: string[]\n}\n\nexport interface UploadContentData {\n  title: string\n  type: 'notes' | 'past-exams' | 'questions' | 'video' | 'document'\n  description?: string\n  course_id: number\n  file: File\n  metadata?: Record<string, any>\n}\n\nexport interface CreateExamData {\n  title: string\n  description?: string\n  duration: number\n  question_count: number\n  topics?: string[]\n  difficulty: 'easy' | 'medium' | 'hard' | 'mixed'\n  settings: ExamSettings\n}\n\nexport interface CreateLearningPathData {\n  title: string\n  description?: string\n  target_date: string\n  daily_hours: number\n  topics: string[]\n}\n\n// Filter and Search Types\nexport interface ContentFilters {\n  type?: string\n  institution_id?: number\n  course_id?: number\n  rating_min?: number\n  verified_only?: boolean\n  search?: string\n  sort_by?: 'recent' | 'popular' | 'rating'\n  page?: number\n  per_page?: number\n}\n\nexport interface ExamFilters {\n  difficulty?: string\n  topic?: string\n  duration_min?: number\n  duration_max?: number\n  search?: string\n  page?: number\n  per_page?: number\n}\n\nexport interface UserStats {\n  total_uploads: number\n  total_downloads: number\n  exams_taken: number\n  average_exam_score: number\n  study_streak: number\n  total_study_hours: number\n  flashcards_reviewed: number\n  learning_paths_completed: number\n}","size_bytes":8840},"src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1902},"src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1828},"src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":768}},"version":1}