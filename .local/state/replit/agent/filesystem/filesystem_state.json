{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}","size_bytes":79},"tailwind.config.js":{"content":"import forms from '@tailwindcss/forms'\nimport animate from 'tailwindcss-animate'\n\n/** @type {import('tailwindcss').Config} */\nexport default {\n    darkMode: [\"class\"],\n    content: [\n    \"./index.html\",\n    \"./src/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n        extend: {\n                colors: {\n                        'primary-green': '#1DB954',\n                        'dark-navy': '#0B1B3C',\n                        teal: '#A6D5D5',\n                        'light-gray': '#F5F6F8',\n                        'muted-gray': '#E5E7EB',\n                        border: 'hsl(var(--border))',\n                        input: 'hsl(var(--input))',\n                        ring: 'hsl(var(--ring))',\n                        background: 'hsl(var(--background))',\n                        foreground: 'hsl(var(--foreground))',\n                        primary: {\n                                DEFAULT: 'hsl(var(--primary))',\n                                foreground: 'hsl(var(--primary-foreground))'\n                        },\n                        secondary: {\n                                DEFAULT: 'hsl(var(--secondary))',\n                                foreground: 'hsl(var(--secondary-foreground))'\n                        },\n                        destructive: {\n                                DEFAULT: 'hsl(var(--destructive))',\n                                foreground: 'hsl(var(--destructive-foreground))'\n                        },\n                        muted: {\n                                DEFAULT: 'hsl(var(--muted))',\n                                foreground: 'hsl(var(--muted-foreground))'\n                        },\n                        accent: {\n                                DEFAULT: 'hsl(var(--accent))',\n                                foreground: 'hsl(var(--accent-foreground))'\n                        },\n                        popover: {\n                                DEFAULT: 'hsl(var(--popover))',\n                                foreground: 'hsl(var(--popover-foreground))'\n                        },\n                        card: {\n                                DEFAULT: 'hsl(var(--card))',\n                                foreground: 'hsl(var(--card-foreground))'\n                        },\n                        chart: {\n                                '1': 'hsl(var(--chart-1))',\n                                '2': 'hsl(var(--chart-2))',\n                                '3': 'hsl(var(--chart-3))',\n                                '4': 'hsl(var(--chart-4))',\n                                '5': 'hsl(var(--chart-5))'\n                        }\n                },\n                borderRadius: {\n                        lg: 'var(--radius)',\n                        md: 'calc(var(--radius) - 2px)',\n                        sm: 'calc(var(--radius) - 4px)'\n                }\n        }\n  },\n  plugins: [forms, animate],\n}","size_bytes":2867},"vite.config.ts":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport { fileURLToPath, URL } from 'node:url'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    host: '0.0.0.0',\n    port: 5000,\n    allowedHosts: true,\n  },\n  resolve: {\n    alias: {\n      '@': fileURLToPath(new URL('./src', import.meta.url)),\n      '@assets': fileURLToPath(new URL('./src/assets', import.meta.url)),\n    },\n  },\n  define: {\n    global: 'globalThis',\n  },\n})","size_bytes":502},"src/App.tsx":{"content":"import { Routes, Route, Navigate } from 'react-router-dom'\nimport Layout from '@/components/layout/Layout'\nimport Dashboard from '@/pages/Dashboard'\nimport SignIn from '@/pages/auth/SignIn'\nimport SignUp from '@/pages/auth/SignUp'\nimport Onboarding from '@/pages/auth/Onboarding'\nimport ContentLibrary from '@/pages/ContentLibrary'\nimport AITools from '@/pages/AITools'\nimport ExamEngine from '@/pages/ExamEngine'\nimport LearningPaths from '@/pages/LearningPaths'\nimport Subscription from '@/pages/Subscription'\n\nfunction App() {\n  return (\n    <Routes>\n      {/* Public Routes */}\n      <Route path=\"/auth/sign-in\" element={<SignIn />} />\n      <Route path=\"/auth/sign-up\" element={<SignUp />} />\n      <Route path=\"/auth/onboarding\" element={<Onboarding />} />\n      \n      {/* Protected Routes */}\n      <Route path=\"/\" element={<Layout />}>\n        <Route index element={<Navigate to=\"/dashboard\" replace />} />\n        <Route path=\"/dashboard\" element={<Dashboard />} />\n        <Route path=\"/content\" element={<ContentLibrary />} />\n        <Route path=\"/ai-tools\" element={<AITools />} />\n        <Route path=\"/exams\" element={<ExamEngine />} />\n        <Route path=\"/learning-paths\" element={<LearningPaths />} />\n        <Route path=\"/subscription\" element={<Subscription />} />\n      </Route>\n\n      {/* Catch all route */}\n      <Route path=\"*\" element={<Navigate to=\"/dashboard\" replace />} />\n    </Routes>\n  )\n}\n\nexport default App","size_bytes":1445},"src/main.tsx":{"content":"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App.tsx'\nimport './styles/globals.css'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n)","size_bytes":336},"src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"src/services/api.ts":{"content":"// StudentDrive MVP - API Client Service for Laravel Backend Integration\n\nimport axios, { AxiosInstance, AxiosError } from 'axios'\nimport {\n  User,\n  Institution,\n  Course,\n  Content,\n  ContentFilters,\n  UploadContentData,\n  ContentRating,\n  Flashcard,\n  Quiz,\n  Summary,\n  MindMap,\n  Exam,\n  CreateExamData,\n  ExamAttempt,\n  ExamResult,\n  LearningPath,\n  CreateLearningPathData,\n  LearningPathTask,\n  SpacedRepetitionItem,\n  SubscriptionPlan,\n  Subscription,\n  PerformanceSummary,\n  AuthResponse,\n  LoginCredentials,\n  RegisterData,\n  OnboardingData,\n  ApiResponse,\n  PaginatedResponse,\n  ExamFilters,\n  UserStats\n} from '@/types/models'\n\n// API Configuration  \nconst API_BASE_URL = (import.meta.env as any)?.VITE_API_URL || 'http://localhost:8000'\nconst API_TIMEOUT = 30000 // 30 seconds\n\nclass ApiClient {\n  private client: AxiosInstance\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: API_TIMEOUT,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n    })\n\n    // Request interceptor for adding auth token\n    this.client.interceptors.request.use(\n      (config) => {\n        const token = this.getAuthToken()\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`\n        }\n        return config\n      },\n      (error) => {\n        return Promise.reject(error)\n      }\n    )\n\n    // Response interceptor for handling common responses and errors\n    this.client.interceptors.response.use(\n      (response) => response,\n      (error: AxiosError) => {\n        // Handle common error scenarios\n        if (error.response?.status === 401) {\n          this.clearAuthToken()\n          // Redirect to login or emit auth error event\n          window.location.href = '/auth/login'\n        }\n        \n        if (error.response?.status === 422) {\n          // Validation errors - pass them through\n          return Promise.reject(error)\n        }\n\n        if (error.response && error.response.status >= 500) {\n          console.error('Server error:', error.response.data)\n        }\n\n        return Promise.reject(error)\n      }\n    )\n  }\n\n  // Auth Token Management\n  private getAuthToken(): string | null {\n    return localStorage.getItem('studentdrive_auth_token')\n  }\n\n  private setAuthToken(token: string): void {\n    localStorage.setItem('studentdrive_auth_token', token)\n  }\n\n  private clearAuthToken(): void {\n    localStorage.removeItem('studentdrive_auth_token')\n    localStorage.removeItem('studentdrive_user')\n  }\n\n  // Authentication Endpoints\n  async register(data: RegisterData): Promise<AuthResponse> {\n    const response = await this.client.post<ApiResponse<AuthResponse>>('/api/auth/register', data)\n    const authData = response.data.data\n    this.setAuthToken(authData.token)\n    localStorage.setItem('studentdrive_user', JSON.stringify(authData.user))\n    return authData\n  }\n\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    const response = await this.client.post<ApiResponse<AuthResponse>>('/api/auth/login', credentials)\n    const authData = response.data.data\n    this.setAuthToken(authData.token)\n    localStorage.setItem('studentdrive_user', JSON.stringify(authData.user))\n    return authData\n  }\n\n  async logout(): Promise<void> {\n    try {\n      await this.client.post('/api/auth/logout')\n    } finally {\n      this.clearAuthToken()\n    }\n  }\n\n  async getCurrentUser(): Promise<User> {\n    const response = await this.client.get<ApiResponse<User>>('/api/auth/me')\n    return response.data.data\n  }\n\n  async updateOnboarding(userId: number, data: OnboardingData): Promise<User> {\n    const response = await this.client.put<ApiResponse<User>>(`/api/users/${userId}/onboarding`, data)\n    return response.data.data\n  }\n\n  // Institution Endpoints\n  async getInstitutions(): Promise<Institution[]> {\n    const response = await this.client.get<ApiResponse<Institution[]>>('/api/institutions')\n    return response.data.data\n  }\n\n  async getInstitution(id: number): Promise<Institution> {\n    const response = await this.client.get<ApiResponse<Institution>>(`/api/institutions/${id}`)\n    return response.data.data\n  }\n\n  // Course Endpoints\n  async getCourses(): Promise<Course[]> {\n    const response = await this.client.get<ApiResponse<Course[]>>('/api/courses')\n    return response.data.data\n  }\n\n  async getCourse(id: number): Promise<Course> {\n    const response = await this.client.get<ApiResponse<Course>>(`/api/courses/${id}`)\n    return response.data.data\n  }\n\n  async createCourse(data: FormData): Promise<Course> {\n    const response = await this.client.post<ApiResponse<Course>>('/api/courses', data, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    })\n    return response.data.data\n  }\n\n  // Content Endpoints\n  async getContents(filters?: ContentFilters): Promise<PaginatedResponse<Content>> {\n    const response = await this.client.get<PaginatedResponse<Content>>('/api/contents', {\n      params: filters\n    })\n    return response.data\n  }\n\n  async uploadContent(data: UploadContentData): Promise<Content> {\n    const formData = new FormData()\n    formData.append('title', data.title)\n    formData.append('type', data.type)\n    formData.append('course_id', data.course_id.toString())\n    formData.append('file', data.file)\n    \n    if (data.description) {\n      formData.append('description', data.description)\n    }\n    \n    if (data.metadata) {\n      formData.append('metadata', JSON.stringify(data.metadata))\n    }\n\n    const response = await this.client.post<ApiResponse<Content>>('/api/contents', formData, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    })\n    return response.data.data\n  }\n\n  async getContentDownloadUrl(id: number): Promise<string> {\n    const response = await this.client.get<ApiResponse<{ url: string }>>(`/api/contents/${id}/download`)\n    return response.data.data.url\n  }\n\n  async rateContent(id: number, rating: number, feedback?: string): Promise<ContentRating> {\n    const response = await this.client.post<ApiResponse<ContentRating>>(`/api/contents/${id}/rate`, {\n      rating,\n      feedback\n    })\n    return response.data.data\n  }\n\n  // AI Tools Endpoints\n  async generateFlashcards(contentIds: number[]): Promise<Flashcard[]> {\n    const response = await this.client.post<ApiResponse<{ flashcards: Flashcard[] }>>('/api/ai/flashcards', {\n      content_ids: contentIds\n    })\n    return response.data.data.flashcards\n  }\n\n  async generateQuiz(params: { content_ids?: number[], youtube_url?: string }): Promise<Quiz> {\n    const response = await this.client.post<ApiResponse<{ quiz: Quiz }>>('/api/ai/quiz', params)\n    return response.data.data.quiz\n  }\n\n  async generateSummary(params: { content_id?: number, text?: string }): Promise<Summary> {\n    const response = await this.client.post<ApiResponse<{ summary: Summary }>>('/api/ai/summarize', params)\n    return response.data.data.summary\n  }\n\n  async generateMindmap(contentIds: number[]): Promise<MindMap> {\n    const response = await this.client.post<ApiResponse<{ mindmap: MindMap }>>('/api/ai/mindmap', {\n      content_ids: contentIds\n    })\n    return response.data.data.mindmap\n  }\n\n  // Exam Endpoints\n  async createExam(data: CreateExamData): Promise<{ exam_id: number }> {\n    const response = await this.client.post<ApiResponse<{ exam_id: number }>>('/api/exams', data)\n    return response.data.data\n  }\n\n  async getExam(id: number): Promise<Exam> {\n    const response = await this.client.get<ApiResponse<Exam>>(`/api/exams/${id}`)\n    return response.data.data\n  }\n\n  async getExams(filters?: ExamFilters): Promise<PaginatedResponse<Exam>> {\n    const response = await this.client.get<PaginatedResponse<Exam>>('/api/exams', {\n      params: filters\n    })\n    return response.data\n  }\n\n  async submitExam(examId: number, answers: any[]): Promise<ExamResult> {\n    const response = await this.client.post<ApiResponse<ExamResult>>(`/api/exams/${examId}/submit`, {\n      answers\n    })\n    return response.data.data\n  }\n\n  async getExamAttempts(examId?: number): Promise<ExamAttempt[]> {\n    const url = examId ? `/api/exams/${examId}/attempts` : '/api/exam-attempts'\n    const response = await this.client.get<ApiResponse<ExamAttempt[]>>(url)\n    return response.data.data\n  }\n\n  // Learning Path & Scheduling Endpoints\n  async createLearningPath(data: CreateLearningPathData): Promise<LearningPath> {\n    const response = await this.client.post<ApiResponse<{ schedule: LearningPath }>>('/api/learning-paths', data)\n    return response.data.data.schedule\n  }\n\n  async getLearningPath(id: number): Promise<LearningPath> {\n    const response = await this.client.get<ApiResponse<LearningPath>>(`/api/learning-paths/${id}`)\n    return response.data.data\n  }\n\n  async getLearningPaths(): Promise<LearningPath[]> {\n    const response = await this.client.get<ApiResponse<LearningPath[]>>('/api/learning-paths')\n    return response.data.data\n  }\n\n  async updateTaskStatus(taskId: number, status: string): Promise<LearningPathTask> {\n    const response = await this.client.patch<ApiResponse<LearningPathTask>>(`/api/learning-path-tasks/${taskId}`, {\n      status\n    })\n    return response.data.data\n  }\n\n  // Spaced Repetition Endpoints\n  async getReviewQueue(): Promise<SpacedRepetitionItem[]> {\n    const response = await this.client.get<ApiResponse<SpacedRepetitionItem[]>>('/api/spaced-repetition/queue')\n    return response.data.data\n  }\n\n  async reviewItem(itemId: number, quality: number): Promise<SpacedRepetitionItem> {\n    const response = await this.client.post<ApiResponse<SpacedRepetitionItem>>(`/api/spaced-repetition/${itemId}/review`, {\n      quality\n    })\n    return response.data.data\n  }\n\n  // Subscription Endpoints\n  async getSubscriptionPlans(): Promise<SubscriptionPlan[]> {\n    const response = await this.client.get<ApiResponse<SubscriptionPlan[]>>('/api/subscriptions/plans')\n    return response.data.data\n  }\n\n  async createSubscription(planId: string, paymentToken: string): Promise<Subscription> {\n    const response = await this.client.post<ApiResponse<Subscription>>('/api/subscriptions', {\n      plan_id: planId,\n      payment_token: paymentToken\n    })\n    return response.data.data\n  }\n\n  async getCurrentSubscription(): Promise<Subscription | null> {\n    try {\n      const response = await this.client.get<ApiResponse<Subscription>>('/api/subscriptions/current')\n      return response.data.data\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response?.status === 404) {\n        return null\n      }\n      throw error\n    }\n  }\n\n  async cancelSubscription(): Promise<void> {\n    await this.client.delete('/api/subscriptions/current')\n  }\n\n  // Dashboard & Analytics Endpoints\n  async getDashboardSummary(): Promise<PerformanceSummary> {\n    const response = await this.client.get<ApiResponse<PerformanceSummary>>('/api/dashboard/summary')\n    return response.data.data\n  }\n\n  async getUserStats(): Promise<UserStats> {\n    const response = await this.client.get<ApiResponse<UserStats>>('/api/users/stats')\n    return response.data.data\n  }\n\n  // File Upload Helper\n  async uploadFile(file: File, type: 'avatar' | 'content' | 'document' = 'content'): Promise<string> {\n    const formData = new FormData()\n    formData.append('file', file)\n    formData.append('type', type)\n\n    const response = await this.client.post<ApiResponse<{ url: string }>>('/api/upload', formData, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    })\n    return response.data.data.url\n  }\n\n  // Search Endpoints\n  async searchContent(query: string, filters?: ContentFilters): Promise<Content[]> {\n    const response = await this.client.get<ApiResponse<Content[]>>('/api/search/contents', {\n      params: { q: query, ...filters }\n    })\n    return response.data.data\n  }\n\n  async searchInstitutions(query: string): Promise<Institution[]> {\n    const response = await this.client.get<ApiResponse<Institution[]>>('/api/search/institutions', {\n      params: { q: query }\n    })\n    return response.data.data\n  }\n\n  // Health Check\n  async healthCheck(): Promise<boolean> {\n    try {\n      const response = await this.client.get('/api/health')\n      return response.status === 200\n    } catch (error) {\n      console.error('Health check failed:', error)\n      return false\n    }\n  }\n}\n\n// Create and export singleton instance\nexport const apiClient = new ApiClient()\n\n// Export individual API methods for easier importing\nexport const {\n  // Auth\n  register,\n  login,\n  logout,\n  getCurrentUser,\n  updateOnboarding,\n  \n  // Institutions & Courses\n  getInstitutions,\n  getInstitution,\n  getCourses,\n  getCourse,\n  createCourse,\n  \n  // Content\n  getContents,\n  uploadContent,\n  getContentDownloadUrl,\n  rateContent,\n  \n  // AI Tools\n  generateFlashcards,\n  generateQuiz,\n  generateSummary,\n  generateMindmap,\n  \n  // Exams\n  createExam,\n  getExam,\n  getExams,\n  submitExam,\n  getExamAttempts,\n  \n  // Learning Paths\n  createLearningPath,\n  getLearningPath,\n  getLearningPaths,\n  updateTaskStatus,\n  \n  // Spaced Repetition\n  getReviewQueue,\n  reviewItem,\n  \n  // Subscriptions\n  getSubscriptionPlans,\n  createSubscription,\n  getCurrentSubscription,\n  cancelSubscription,\n  \n  // Dashboard\n  getDashboardSummary,\n  getUserStats,\n  \n  // Utilities\n  uploadFile,\n  searchContent,\n  searchInstitutions,\n  healthCheck\n} = apiClient\n\nexport default apiClient","size_bytes":13440},"src/styles/globals.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --primary-green: #1DB954;\n  --dark-navy: #0B1B3C;\n  --teal: #A6D5D5;\n  --white: #FFFFFF;\n  --light-gray: #F5F6F8;\n  --muted-gray: #E5E7EB;\n  --black: #000000;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground;\n  }\n  :root {\n    --background: 220 14% 97%;\n    --foreground: 0 0% 0%;\n    --card: 0 0% 100%;\n    --card-foreground: 0 0% 0%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 0 0% 0%;\n    --primary: 141 73% 42%;\n    --primary-foreground: 0 0% 100%;\n    --secondary: 180 34% 74%;\n    --secondary-foreground: 218 58% 14%;\n    --muted: 210 16% 90%;\n    --muted-foreground: 220 9% 46%;\n    --accent: 220 14% 97%;\n    --accent-foreground: 218 58% 14%;\n    --destructive: 0 84% 60%;\n    --destructive-foreground: 0 0% 100%;\n    --border: 210 16% 90%;\n    --input: 210 16% 90%;\n    --ring: 141 73% 42%;\n    --chart-1: 141 73% 42%;\n    --chart-2: 180 34% 74%;\n    --chart-3: 218 58% 14%;\n    --chart-4: 220 14% 97%;\n    --chart-5: 210 16% 90%;\n    --radius: 0.5rem;\n  }\n  .dark {\n    --background: 0 0% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 0 0% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 0 0% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 0 0% 9%;\n    --secondary: 0 0% 14.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 0 0% 14.9%;\n    --muted-foreground: 0 0% 63.9%;\n    --accent: 0 0% 14.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 14.9%;\n    --input: 0 0% 14.9%;\n    --ring: 0 0% 83.1%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n}","size_bytes":1829},"src/types/models.ts":{"content":"// StudentDrive MVP - TypeScript Interfaces for Laravel Backend Integration\n\nexport interface User {\n  id: number\n  name: string\n  email: string\n  email_verified_at?: string\n  role: 'student' | 'institution' | 'admin'\n  avatar?: string\n  created_at: string\n  updated_at: string\n  \n  // Onboarding fields\n  program?: string\n  institution_id?: number\n  level?: 'undergraduate' | 'graduate' | 'professional'\n  discovered_via?: string\n  goals?: string[]\n  onboarding_completed_at?: string\n}\n\nexport interface Institution {\n  id: number\n  name: string\n  slug: string\n  country: string\n  city?: string\n  logo?: string\n  website?: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface Course {\n  id: number\n  name: string\n  code?: string\n  description?: string\n  institution_id: number\n  institution?: Institution\n  cover_image?: string\n  created_at: string\n  updated_at: string\n  contents_count?: number\n}\n\nexport interface Content {\n  id: number\n  title: string\n  type: 'notes' | 'past-exams' | 'questions' | 'video' | 'document'\n  description?: string\n  file_path: string\n  file_url?: string\n  file_size?: number\n  file_type?: string\n  thumbnail?: string\n  course_id: number\n  course?: Course\n  uploader_id: number\n  uploader?: User\n  downloads_count: number\n  average_rating: number\n  ratings_count: number\n  is_verified: boolean\n  metadata?: Record<string, any>\n  created_at: string\n  updated_at: string\n}\n\nexport interface ContentRating {\n  id: number\n  content_id: number\n  user_id: number\n  rating: number\n  feedback?: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface Flashcard {\n  id: number\n  question: string\n  answer: string\n  explanation?: string\n  difficulty: 'easy' | 'medium' | 'hard'\n  tags?: string[]\n  content_id?: number\n  user_id: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface Quiz {\n  id: number\n  title: string\n  description?: string\n  questions: QuizQuestion[]\n  time_limit?: number\n  user_id: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface QuizQuestion {\n  id: number\n  question: string\n  type: 'multiple-choice' | 'true-false' | 'short-answer'\n  options?: string[]\n  correct_answer: string | number\n  explanation?: string\n  points: number\n}\n\nexport interface Exam {\n  id: number\n  title: string\n  description?: string\n  duration: number // in minutes\n  question_count: number\n  topics?: string[]\n  difficulty: 'easy' | 'medium' | 'hard' | 'mixed'\n  settings: ExamSettings\n  questions: ExamQuestion[]\n  user_id: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface ExamSettings {\n  shuffle_questions: boolean\n  shuffle_options: boolean\n  show_results_immediately: boolean\n  allow_review: boolean\n  auto_submit: boolean\n}\n\nexport interface ExamQuestion {\n  id: number\n  question: string\n  type: 'multiple-choice' | 'true-false' | 'essay'\n  options?: string[]\n  correct_answer: string | number\n  explanation?: string\n  points: number\n  topic?: string\n}\n\nexport interface ExamAttempt {\n  id: number\n  exam_id: number\n  exam?: Exam\n  user_id: number\n  user?: User\n  answers: ExamAnswer[]\n  score: number\n  max_score: number\n  percentage: number\n  time_taken: number // in seconds\n  started_at: string\n  completed_at?: string\n  status: 'in-progress' | 'completed' | 'abandoned'\n}\n\nexport interface ExamAnswer {\n  question_id: number\n  answer: string | number | string[]\n  is_correct: boolean\n  points_earned: number\n}\n\nexport interface ExamResult {\n  attempt: ExamAttempt\n  score: number\n  max_score: number\n  percentage: number\n  time_taken: number\n  breakdown: {\n    correct_answers: number\n    incorrect_answers: number\n    unanswered: number\n    by_topic: Record<string, {\n      correct: number\n      total: number\n      percentage: number\n    }>\n  }\n  weak_topics: string[]\n  recommendations: string[]\n}\n\nexport interface LearningPath {\n  id: number\n  title: string\n  description?: string\n  target_date: string\n  daily_hours: number\n  topics: string[]\n  schedule: LearningPathTask[]\n  progress: number // 0-100\n  user_id: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface LearningPathTask {\n  id: number\n  title: string\n  description?: string\n  type: 'study' | 'practice' | 'review' | 'exam'\n  estimated_duration: number // in minutes\n  due_date: string\n  completed_at?: string\n  content_ids?: number[]\n  status: 'pending' | 'in-progress' | 'completed' | 'overdue'\n}\n\nexport interface SpacedRepetitionItem {\n  id: number\n  content_id: number\n  content?: Content\n  user_id: number\n  ease_factor: number\n  interval: number // in days\n  repetitions: number\n  quality: number // last quality rating (0-5)\n  next_review_date: string\n  last_reviewed_at?: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface Subscription {\n  id: number\n  user_id: number\n  plan_id: string\n  status: 'active' | 'inactive' | 'cancelled' | 'expired'\n  current_period_start: string\n  current_period_end: string\n  stripe_subscription_id?: string\n  stripe_customer_id?: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface SubscriptionPlan {\n  id: string\n  name: string\n  description: string\n  price: number\n  currency: string\n  interval: 'month' | 'year'\n  features: string[]\n  limits: {\n    uploads_per_month?: number\n    ai_requests_per_month?: number\n    storage_gb?: number\n  }\n  is_popular?: boolean\n  stripe_price_id?: string\n}\n\nexport interface MindMapNode {\n  id: string\n  label: string\n  type: 'root' | 'branch' | 'leaf'\n  position: { x: number; y: number }\n  data: {\n    content?: string\n    color?: string\n    size?: number\n  }\n  children?: string[] // IDs of child nodes\n}\n\nexport interface MindMap {\n  id: number\n  title: string\n  description?: string\n  nodes: MindMapNode[]\n  edges: MindMapEdge[]\n  user_id: number\n  content_ids?: number[]\n  created_at: string\n  updated_at: string\n}\n\nexport interface MindMapEdge {\n  id: string\n  source: string\n  target: string\n  type?: string\n  animated?: boolean\n}\n\nexport interface PerformanceSummary {\n  strengths: string[]\n  weaknesses: string[]\n  time_spent: {\n    total_hours: number\n    this_week: number\n    daily_average: number\n  }\n  readiness: {\n    overall: number // 0-100\n    by_topic: Record<string, number>\n  }\n  recent_activity: ActivityItem[]\n  recommendations: string[]\n}\n\nexport interface ActivityItem {\n  id: number\n  type: 'upload' | 'download' | 'study' | 'exam' | 'flashcard' | 'quiz'\n  title: string\n  description?: string\n  score?: number\n  duration?: number\n  created_at: string\n}\n\nexport interface Summary {\n  id: number\n  title: string\n  content: string\n  key_points: string[]\n  word_count: number\n  reading_time: number // in minutes\n  source_content_id?: number\n  user_id: number\n  created_at: string\n  updated_at: string\n}\n\n// API Response Types\nexport interface ApiResponse<T> {\n  data: T\n  message?: string\n  status: number\n}\n\nexport interface PaginatedResponse<T> {\n  data: T[]\n  meta: {\n    current_page: number\n    last_page: number\n    per_page: number\n    total: number\n  }\n  links: {\n    first?: string\n    last?: string\n    prev?: string\n    next?: string\n  }\n}\n\nexport interface AuthResponse {\n  user: User\n  token: string\n  expires_at: string\n}\n\nexport interface LoginCredentials {\n  email: string\n  password: string\n  remember_me?: boolean\n}\n\nexport interface RegisterData {\n  name: string\n  email: string\n  password: string\n  password_confirmation: string\n}\n\nexport interface OnboardingData {\n  program: string\n  institution_id: number\n  level: 'undergraduate' | 'graduate' | 'professional'\n  discovered_via: string\n  goals: string[]\n}\n\nexport interface UploadContentData {\n  title: string\n  type: 'notes' | 'past-exams' | 'questions' | 'video' | 'document'\n  description?: string\n  course_id: number\n  file: File\n  metadata?: Record<string, any>\n}\n\nexport interface CreateExamData {\n  title: string\n  description?: string\n  duration: number\n  question_count: number\n  topics?: string[]\n  difficulty: 'easy' | 'medium' | 'hard' | 'mixed'\n  settings: ExamSettings\n}\n\nexport interface CreateLearningPathData {\n  title: string\n  description?: string\n  target_date: string\n  daily_hours: number\n  topics: string[]\n}\n\n// Filter and Search Types\nexport interface ContentFilters {\n  type?: string\n  institution_id?: number\n  course_id?: number\n  rating_min?: number\n  verified_only?: boolean\n  search?: string\n  sort_by?: 'recent' | 'popular' | 'rating'\n  page?: number\n  per_page?: number\n}\n\nexport interface ExamFilters {\n  difficulty?: string\n  topic?: string\n  duration_min?: number\n  duration_max?: number\n  search?: string\n  page?: number\n  per_page?: number\n}\n\nexport interface UserStats {\n  total_uploads: number\n  total_downloads: number\n  exams_taken: number\n  average_exam_score: number\n  study_streak: number\n  total_study_hours: number\n  flashcards_reviewed: number\n  learning_paths_completed: number\n}","size_bytes":8840},"src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1902},"src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1828},"src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":768},"replit.md":{"content":"# StudentDrive - AI-Powered Study Platform\n\n## Overview\n\nStudentDrive is an AI-powered study platform designed to help students accelerate their academic performance through personalized learning tools. The platform provides AI-generated flashcards, mock exams, study summaries, mind maps, and spaced repetition learning paths. Built as a React SPA with TypeScript, the frontend connects to a Laravel backend API to deliver a comprehensive educational experience with subscription-based monetization.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern React features\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Routing**: React Router v6 for client-side navigation with protected routes\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent, accessible UI components\n- **State Management**: \n  - React Query (TanStack Query) for server state management and caching\n  - Zustand for lightweight client-side state management\n  - Local state with React hooks for component-level state\n\n### Component Structure\n- **Layout System**: Shared layout with responsive sidebar navigation and header\n- **Authentication Flow**: Separate auth pages (SignIn/SignUp) with form validation using React Hook Form and Zod\n- **Dashboard**: Centralized hub showing user stats, progress, and quick actions\n- **Feature Modules**: Organized by domain (auth, content, AI tools, exams, learning paths)\n- **UI Components**: Reusable shadcn/ui components with consistent styling and accessibility\n\n### API Integration\n- **HTTP Client**: Axios-based API client with centralized error handling and request/response interceptors\n- **Type Safety**: Comprehensive TypeScript interfaces for all API responses and request payloads\n- **Authentication**: JWT token management with automatic token refresh\n- **Error Handling**: Global error boundary with user-friendly error messages\n\n### Styling and Design System\n- **Design Tokens**: CSS custom properties for brand colors (Primary Green #1DB954, Dark Navy #0B1B3C, Teal #A6D5D5)\n- **Component Library**: shadcn/ui for consistent, accessible components\n- **Responsive Design**: Mobile-first approach with Tailwind's responsive utilities\n- **Dark Mode**: Prepared with CSS variables for future dark theme support\n\n### Development Tools\n- **Testing**: Vitest and React Testing Library for unit and integration tests\n- **Storybook**: Component documentation and isolated development\n- **Linting**: ESLint with TypeScript and React-specific rules\n- **Type Checking**: Strict TypeScript configuration with path mapping\n\n### Key Features Architecture\n- **PDF Viewing**: Integration with pdfjs-dist for document rendering\n- **AI Tools**: Structured interfaces for flashcard generation, quiz creation, and summarization\n- **Exam Engine**: Timed exam functionality with auto-save and progress tracking\n- **Learning Paths**: Spaced repetition system with SM-2 algorithm implementation\n- **Analytics Dashboard**: Performance tracking with visual progress indicators\n\n## External Dependencies\n\n### Core Libraries\n- **React Ecosystem**: React 18, React DOM, React Router v6\n- **TypeScript**: Full TypeScript support with strict type checking\n- **Build Tools**: Vite with React plugin for fast development and builds\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework with custom configuration\n- **shadcn/ui**: Accessible component library built on Radix UI primitives\n- **Lucide React**: Icon library for consistent iconography\n- **Class Variance Authority**: Utility for component variant management\n\n### State Management and Data Fetching\n- **TanStack React Query**: Server state management, caching, and synchronization\n- **Zustand**: Lightweight state management for client-side state\n- **Axios**: HTTP client for API communication with interceptors\n\n### Form Handling and Validation\n- **React Hook Form**: Performant forms with minimal re-renders\n- **Zod**: Runtime type validation and schema definition\n- **Hookform Resolvers**: Integration between React Hook Form and Zod\n\n### Development and Testing\n- **Vitest**: Fast unit test runner with Jest-compatible API\n- **React Testing Library**: Testing utilities focused on user interactions\n- **Storybook**: Component documentation and isolated development environment\n- **MSW (Mock Service Worker)**: API mocking for development and testing\n\n### Specialized Features\n- **pdfjs-dist**: PDF rendering and manipulation for document viewing\n- **date-fns**: Date manipulation and formatting utilities\n- **React Flow Renderer**: Interactive node-based diagrams for mind maps\n\n### Backend Integration\n- **Laravel API**: RESTful API backend with authentication endpoints\n- **JWT Authentication**: Token-based authentication with automatic refresh\n- **File Upload**: Multipart form data handling for document uploads\n- **Real-time Updates**: Prepared for WebSocket integration for live features\n\n### Third-party Services (Prepared)\n- **Payment Processing**: Stripe integration for subscription management\n- **AI Services**: OpenAI API integration for content generation\n- **Analytics**: User behavior tracking and performance metrics\n- **Email Service**: Transactional email capabilities for notifications","size_bytes":5374},"src/hooks/useContentLibrary.ts":{"content":"import { useState, useEffect } from 'react'\n\nexport interface Content {\n  id: string\n  title: string\n  type: 'notes' | 'past-exams' | 'questions' | 'video' | 'document'\n  course: string\n  uploader: string\n  downloads: number\n  rating: number\n  size: string\n  uploadedAt: Date\n  verified: boolean\n  description?: string\n  file?: File\n  tags?: string[]\n}\n\nexport interface ContentFilters {\n  searchQuery: string\n  selectedType: string\n  sortBy: 'recent' | 'popular' | 'rating'\n}\n\nconst STORAGE_KEY = 'studentdrive_content_library'\n\nconst DEFAULT_FILTERS: ContentFilters = {\n  searchQuery: '',\n  selectedType: 'all',\n  sortBy: 'recent',\n}\n\nexport function useContentLibrary() {\n  const [contents, setContents] = useState<Content[]>([])\n  const [filters, setFilters] = useState<ContentFilters>(DEFAULT_FILTERS)\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    loadContents()\n  }, [])\n\n  const loadContents = () => {\n    try {\n      const savedContents = localStorage.getItem(STORAGE_KEY)\n      if (savedContents) {\n        const parsed = JSON.parse(savedContents)\n        setContents(parsed.map((content: any) => ({\n          ...content,\n          uploadedAt: new Date(content.uploadedAt)\n        })))\n      }\n    } catch (error) {\n      console.error('Error loading contents:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const saveContents = (newContents: Content[]) => {\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(newContents))\n      setContents(newContents)\n    } catch (error) {\n      console.error('Error saving contents:', error)\n    }\n  }\n\n  const addContent = (contentData: Omit<Content, 'id' | 'uploadedAt' | 'downloads' | 'rating'>) => {\n    const newContent: Content = {\n      ...contentData,\n      id: Date.now().toString(),\n      uploadedAt: new Date(),\n      downloads: 0,\n      rating: 0,\n    }\n\n    const updatedContents = [newContent, ...contents]\n    saveContents(updatedContents)\n  }\n\n  const updateContent = (id: string, updates: Partial<Content>) => {\n    const updatedContents = contents.map(content => \n      content.id === id ? { ...content, ...updates } : content\n    )\n    saveContents(updatedContents)\n  }\n\n  const deleteContent = (id: string) => {\n    const updatedContents = contents.filter(content => content.id !== id)\n    saveContents(updatedContents)\n  }\n\n  const incrementDownloads = (id: string) => {\n    updateContent(id, { \n      downloads: contents.find(c => c.id === id)?.downloads + 1 || 1 \n    })\n  }\n\n  const addRating = (id: string, newRating: number) => {\n    const content = contents.find(c => c.id === id)\n    if (!content) return\n\n    // Simple average calculation\n    const currentRating = content.rating || 0\n    const averageRating = currentRating === 0 ? newRating : (currentRating + newRating) / 2\n    \n    updateContent(id, { rating: Math.round(averageRating * 10) / 10 })\n  }\n\n  const getFilteredContents = () => {\n    let filtered = contents\n\n    // Filter by search query\n    if (filters.searchQuery) {\n      filtered = filtered.filter(content =>\n        content.title.toLowerCase().includes(filters.searchQuery.toLowerCase()) ||\n        content.course.toLowerCase().includes(filters.searchQuery.toLowerCase()) ||\n        content.uploader.toLowerCase().includes(filters.searchQuery.toLowerCase())\n      )\n    }\n\n    // Filter by type\n    if (filters.selectedType !== 'all') {\n      filtered = filtered.filter(content => content.type === filters.selectedType)\n    }\n\n    // Sort\n    switch (filters.sortBy) {\n      case 'popular':\n        filtered.sort((a, b) => b.downloads - a.downloads)\n        break\n      case 'rating':\n        filtered.sort((a, b) => b.rating - a.rating)\n        break\n      case 'recent':\n      default:\n        filtered.sort((a, b) => b.uploadedAt.getTime() - a.uploadedAt.getTime())\n        break\n    }\n\n    return filtered\n  }\n\n  const updateFilters = (newFilters: Partial<ContentFilters>) => {\n    setFilters(prev => ({ ...prev, ...newFilters }))\n  }\n\n  const resetFilters = () => {\n    setFilters(DEFAULT_FILTERS)\n  }\n\n  return {\n    contents: getFilteredContents(),\n    allContents: contents,\n    filters,\n    isLoading,\n    addContent,\n    updateContent,\n    deleteContent,\n    incrementDownloads,\n    addRating,\n    updateFilters,\n    resetFilters,\n  }\n}","size_bytes":4305},"src/hooks/useUserStats.ts":{"content":"import { useState, useEffect } from 'react'\n\nexport interface UserStats {\n  studyStreak: number\n  totalStudyTime: number // in hours\n  examAverage: number // percentage\n  goalsCompleted: number\n  totalGoals: number\n  recentActivity: ActivityItem[]\n  todaySchedule: ScheduleItem[]\n}\n\nexport interface ActivityItem {\n  id: string\n  type: 'quiz' | 'upload' | 'flashcards' | 'exam' | 'study'\n  title: string\n  description: string\n  timestamp: Date\n  score?: number\n}\n\nexport interface ScheduleItem {\n  id: string\n  title: string\n  time: string\n  type: 'study' | 'practice' | 'quiz' | 'review'\n}\n\nconst STORAGE_KEYS = {\n  USER_STATS: 'studentdrive_user_stats',\n  RECENT_ACTIVITY: 'studentdrive_recent_activity',\n  TODAY_SCHEDULE: 'studentdrive_today_schedule',\n}\n\nconst DEFAULT_STATS: UserStats = {\n  studyStreak: 0,\n  totalStudyTime: 0,\n  examAverage: 0,\n  goalsCompleted: 0,\n  totalGoals: 0,\n  recentActivity: [],\n  todaySchedule: [],\n}\n\nexport function useUserStats() {\n  const [stats, setStats] = useState<UserStats>(DEFAULT_STATS)\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    loadStats()\n  }, [])\n\n  const loadStats = () => {\n    try {\n      const savedStats = localStorage.getItem(STORAGE_KEYS.USER_STATS)\n      const savedActivity = localStorage.getItem(STORAGE_KEYS.RECENT_ACTIVITY)\n      const savedSchedule = localStorage.getItem(STORAGE_KEYS.TODAY_SCHEDULE)\n\n      const loadedStats = savedStats ? JSON.parse(savedStats) : DEFAULT_STATS\n      const loadedActivity = savedActivity ? JSON.parse(savedActivity) : []\n      const loadedSchedule = savedSchedule ? JSON.parse(savedSchedule) : []\n\n      setStats({\n        ...loadedStats,\n        recentActivity: loadedActivity.map((item: any) => ({\n          ...item,\n          timestamp: new Date(item.timestamp)\n        })),\n        todaySchedule: loadedSchedule,\n      })\n    } catch (error) {\n      console.error('Error loading user stats:', error)\n      setStats(DEFAULT_STATS)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const updateStats = (newStats: Partial<UserStats>) => {\n    const updatedStats = { ...stats, ...newStats }\n    setStats(updatedStats)\n    \n    try {\n      localStorage.setItem(STORAGE_KEYS.USER_STATS, JSON.stringify({\n        studyStreak: updatedStats.studyStreak,\n        totalStudyTime: updatedStats.totalStudyTime,\n        examAverage: updatedStats.examAverage,\n        goalsCompleted: updatedStats.goalsCompleted,\n        totalGoals: updatedStats.totalGoals,\n      }))\n      \n      localStorage.setItem(STORAGE_KEYS.RECENT_ACTIVITY, JSON.stringify(updatedStats.recentActivity))\n      localStorage.setItem(STORAGE_KEYS.TODAY_SCHEDULE, JSON.stringify(updatedStats.todaySchedule))\n    } catch (error) {\n      console.error('Error saving user stats:', error)\n    }\n  }\n\n  const addActivity = (activity: Omit<ActivityItem, 'id' | 'timestamp'>) => {\n    const newActivity: ActivityItem = {\n      ...activity,\n      id: Date.now().toString(),\n      timestamp: new Date(),\n    }\n\n    const updatedActivity = [newActivity, ...stats.recentActivity].slice(0, 10) // Keep only latest 10\n    updateStats({ recentActivity: updatedActivity })\n  }\n\n  const addScheduleItem = (item: Omit<ScheduleItem, 'id'>) => {\n    const newItem: ScheduleItem = {\n      ...item,\n      id: Date.now().toString(),\n    }\n\n    const updatedSchedule = [...stats.todaySchedule, newItem]\n    updateStats({ todaySchedule: updatedSchedule })\n  }\n\n  const incrementStudyTime = (hours: number) => {\n    updateStats({ \n      totalStudyTime: stats.totalStudyTime + hours,\n      studyStreak: stats.studyStreak + 1\n    })\n  }\n\n  const updateExamScore = (score: number) => {\n    // Simple average calculation - in real app you'd want more sophisticated tracking\n    const newAverage = stats.examAverage === 0 \n      ? score \n      : Math.round((stats.examAverage + score) / 2)\n    \n    updateStats({ examAverage: newAverage })\n  }\n\n  const completeGoal = () => {\n    updateStats({ \n      goalsCompleted: stats.goalsCompleted + 1 \n    })\n  }\n\n  const addGoal = () => {\n    updateStats({ \n      totalGoals: stats.totalGoals + 1 \n    })\n  }\n\n  return {\n    stats,\n    isLoading,\n    addActivity,\n    addScheduleItem,\n    incrementStudyTime,\n    updateExamScore,\n    completeGoal,\n    addGoal,\n    updateStats,\n  }\n}","size_bytes":4287},"src/pages/AITools.tsx":{"content":"import { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { \n  Brain, \n  FileText, \n  HelpCircle, \n  Zap, \n  GitBranch,\n  Upload,\n  Loader2,\n  Sparkles,\n  BookOpen,\n  PenTool,\n  Target\n} from 'lucide-react'\n\nconst aiTools = [\n  {\n    id: 'flashcards',\n    title: 'AI Flashcards',\n    description: 'Generate interactive flashcards from your study materials',\n    icon: Zap,\n    color: 'bg-blue-500',\n    features: ['Auto-generate from PDFs', 'Difficulty levels', 'Spaced repetition'],\n  },\n  {\n    id: 'quiz',\n    title: 'Smart Quiz Generator',\n    description: 'Create practice quizzes from your content or YouTube videos',\n    icon: HelpCircle,\n    color: 'bg-green-500',\n    features: ['Multiple choice', 'True/False', 'Short answer'],\n  },\n  {\n    id: 'summary',\n    title: 'Study Summarizer',\n    description: 'Get concise summaries of long documents and lectures',\n    icon: FileText,\n    color: 'bg-purple-500',\n    features: ['Key points extraction', 'Custom length', 'Bullet points'],\n  },\n  {\n    id: 'mindmap',\n    title: 'Mind Map Creator',\n    description: 'Visualize concepts and relationships in your study materials',\n    icon: GitBranch,\n    color: 'bg-orange-500',\n    features: ['Interactive diagrams', 'Concept linking', 'Export options'],\n  },\n]\n\nexport default function AITools() {\n  const [selectedTool, setSelectedTool] = useState<string | null>(null)\n  const [isProcessing, setIsProcessing] = useState(false)\n  const [input, setInput] = useState('')\n\n  const handleToolSelect = (toolId: string) => {\n    setSelectedTool(toolId)\n    setInput('')\n  }\n\n  const handleGenerate = async () => {\n    setIsProcessing(true)\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 2000))\n    setIsProcessing(false)\n    // TODO: Process with actual AI service\n  }\n\n  const renderToolInterface = () => {\n    const tool = aiTools.find(t => t.id === selectedTool)\n    if (!tool) return null\n\n    return (\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center space-x-3\">\n            <div className={`p-2 rounded-lg ${tool.color}`}>\n              <tool.icon className=\"h-6 w-6 text-white\" />\n            </div>\n            <div>\n              <CardTitle>{tool.title}</CardTitle>\n              <CardDescription>{tool.description}</CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Input Options */}\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Card className=\"border-dashed\">\n                <CardContent className=\"p-6 text-center\">\n                  <Upload className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\n                  <h3 className=\"font-medium mb-1\">Upload Document</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    PDF, DOCX, or TXT files\n                  </p>\n                  <Button variant=\"outline\" size=\"sm\" className=\"mt-2\">\n                    Choose File\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-dashed\">\n                <CardContent className=\"p-6 text-center\">\n                  <BookOpen className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\n                  <h3 className=\"font-medium mb-1\">From Library</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Use existing content\n                  </p>\n                  <Button variant=\"outline\" size=\"sm\" className=\"mt-2\">\n                    Browse Library\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Text Input */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Or enter text directly:</label>\n              <textarea\n                placeholder={`Paste your content here to generate ${tool.title.toLowerCase()}...`}\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n                className=\"w-full min-h-32 p-3 border rounded-md resize-none\"\n              />\n            </div>\n\n            {/* Tool-specific options */}\n            {selectedTool === 'flashcards' && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Number of Cards</label>\n                  <Input type=\"number\" placeholder=\"20\" min=\"5\" max=\"100\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Difficulty Level</label>\n                  <select className=\"w-full p-2 border rounded-md\">\n                    <option value=\"mixed\">Mixed</option>\n                    <option value=\"easy\">Easy</option>\n                    <option value=\"medium\">Medium</option>\n                    <option value=\"hard\">Hard</option>\n                  </select>\n                </div>\n              </div>\n            )}\n\n            {selectedTool === 'quiz' && (\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Question Count</label>\n                  <Input type=\"number\" placeholder=\"10\" min=\"5\" max=\"50\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Question Type</label>\n                  <select className=\"w-full p-2 border rounded-md\">\n                    <option value=\"mixed\">Mixed</option>\n                    <option value=\"multiple-choice\">Multiple Choice</option>\n                    <option value=\"true-false\">True/False</option>\n                    <option value=\"short-answer\">Short Answer</option>\n                  </select>\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Difficulty</label>\n                  <select className=\"w-full p-2 border rounded-md\">\n                    <option value=\"medium\">Medium</option>\n                    <option value=\"easy\">Easy</option>\n                    <option value=\"hard\">Hard</option>\n                  </select>\n                </div>\n              </div>\n            )}\n\n            {selectedTool === 'summary' && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Summary Length</label>\n                  <select className=\"w-full p-2 border rounded-md\">\n                    <option value=\"medium\">Medium (200-300 words)</option>\n                    <option value=\"short\">Short (100-200 words)</option>\n                    <option value=\"long\">Long (400-500 words)</option>\n                  </select>\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Format</label>\n                  <select className=\"w-full p-2 border rounded-md\">\n                    <option value=\"paragraph\">Paragraph</option>\n                    <option value=\"bullets\">Bullet Points</option>\n                    <option value=\"outline\">Outline</option>\n                  </select>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Generate Button */}\n          <div className=\"flex justify-center\">\n            <Button \n              onClick={handleGenerate}\n              disabled={isProcessing || !input.trim()}\n              className=\"px-8\"\n            >\n              {isProcessing ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Generating...\n                </>\n              ) : (\n                <>\n                  <Sparkles className=\"h-4 w-4 mr-2\" />\n                  Generate {tool.title}\n                </>\n              )}\n            </Button>\n          </div>\n\n          {/* Results placeholder */}\n          {isProcessing && (\n            <Card className=\"border-dashed\">\n              <CardContent className=\"p-8 text-center\">\n                <Brain className=\"h-12 w-12 mx-auto mb-4 text-primary-green animate-pulse\" />\n                <h3 className=\"font-medium mb-2\">AI is working on your content...</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  This usually takes 30-60 seconds depending on content length\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-3xl font-bold text-dark-navy\">AI Study Tools</h1>\n        <p className=\"text-muted-foreground\">\n          Transform your study materials with AI-powered tools\n        </p>\n      </div>\n\n      {!selectedTool ? (\n        /* Tool Selection Grid */\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {aiTools.map((tool) => {\n            const Icon = tool.icon\n            return (\n              <Card \n                key={tool.id} \n                className=\"hover:shadow-lg transition-shadow cursor-pointer\"\n                onClick={() => handleToolSelect(tool.id)}\n              >\n                <CardHeader>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`p-3 rounded-lg ${tool.color}`}>\n                      <Icon className=\"h-6 w-6 text-white\" />\n                    </div>\n                    <div>\n                      <CardTitle>{tool.title}</CardTitle>\n                      <CardDescription>{tool.description}</CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <h4 className=\"font-medium text-sm\">Key Features:</h4>\n                    <ul className=\"space-y-1\">\n                      {tool.features.map((feature, index) => (\n                        <li key={index} className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                          <Target className=\"h-3 w-3 text-primary-green\" />\n                          <span>{feature}</span>\n                        </li>\n                      ))}\n                    </ul>\n                    <Button className=\"w-full mt-4\">\n                      Try {tool.title}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )\n          })}\n        </div>\n      ) : (\n        /* Selected Tool Interface */\n        <div className=\"space-y-4\">\n          <Button \n            variant=\"outline\" \n            onClick={() => setSelectedTool(null)}\n            className=\"mb-4\"\n          >\n            ← Back to Tools\n          </Button>\n          {renderToolInterface()}\n        </div>\n      )}\n    </div>\n  )\n}","size_bytes":11271},"src/pages/ContentLibrary.tsx":{"content":"import { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { useContentLibrary } from '@/hooks/useContentLibrary'\nimport { useUserStats } from '@/hooks/useUserStats'\nimport { \n  Upload, \n  Search, \n  Filter, \n  Download, \n  Star, \n  FileText, \n  Video, \n  BookOpen,\n  File,\n  Plus,\n  Grid,\n  List,\n  SortAsc,\n  Eye,\n  Trash2,\n  FolderOpen\n} from 'lucide-react'\n\nconst contentTypes = [\n  { id: 'all', label: 'All Content', icon: FileText },\n  { id: 'notes', label: 'Study Notes', icon: BookOpen },\n  { id: 'past-exams', label: 'Past Exams', icon: FileText },\n  { id: 'questions', label: 'Practice Questions', icon: File },\n  { id: 'video', label: 'Video Lectures', icon: Video },\n  { id: 'document', label: 'Documents', icon: File },\n]\n\nconst sampleContent = [\n  {\n    id: 1,\n    title: 'Organic Chemistry Chapter 5 - Reaction Mechanisms',\n    type: 'notes',\n    course: 'CHEM 301',\n    uploader: 'Sarah M.',\n    downloads: 245,\n    rating: 4.8,\n    size: '2.3 MB',\n    uploadedAt: '2 days ago',\n    verified: true,\n  },\n  {\n    id: 2,\n    title: 'Calculus II Final Exam - Spring 2024',\n    type: 'past-exams',\n    course: 'MATH 202',\n    uploader: 'Mike Chen',\n    downloads: 892,\n    rating: 4.9,\n    size: '1.8 MB',\n    uploadedAt: '1 week ago',\n    verified: true,\n  },\n  {\n    id: 3,\n    title: 'Biology Practice Problems - Genetics',\n    type: 'questions',\n    course: 'BIO 101',\n    uploader: 'Emma K.',\n    downloads: 156,\n    rating: 4.6,\n    size: '945 KB',\n    uploadedAt: '3 days ago',\n    verified: false,\n  },\n  {\n    id: 4,\n    title: 'Introduction to Algorithms - Lecture Series',\n    type: 'video',\n    course: 'CS 201',\n    uploader: 'Prof. Johnson',\n    downloads: 1240,\n    rating: 4.9,\n    size: '125 MB',\n    uploadedAt: '5 days ago',\n    verified: true,\n  },\n]\n\nexport default function ContentLibrary() {\n  const [searchQuery, setSearchQuery] = useState('')\n  const [selectedType, setSelectedType] = useState('all')\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid')\n  const [showUploadModal, setShowUploadModal] = useState(false)\n\n  const filteredContent = sampleContent.filter(item => {\n    const matchesSearch = item.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         item.course.toLowerCase().includes(searchQuery.toLowerCase())\n    const matchesType = selectedType === 'all' || item.type === selectedType\n    return matchesSearch && matchesType\n  })\n\n  const getTypeIcon = (type: string) => {\n    const typeConfig = contentTypes.find(t => t.id === type)\n    return typeConfig?.icon || FileText\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-dark-navy\">Content Library</h1>\n          <p className=\"text-muted-foreground\">Access and share study materials with your peers</p>\n        </div>\n        <Button onClick={() => setShowUploadModal(true)}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Upload Content\n        </Button>\n      </div>\n\n      {/* Search and Filters */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col lg:flex-row gap-4\">\n            {/* Search */}\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by title, course, or topic...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n\n            {/* Filters */}\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" size=\"sm\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Filters\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <SortAsc className=\"h-4 w-4 mr-2\" />\n                Sort\n              </Button>\n              <div className=\"flex border rounded-md\">\n                <Button\n                  variant={viewMode === 'grid' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('grid')}\n                  className=\"rounded-r-none\"\n                >\n                  <Grid className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === 'list' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('list')}\n                  className=\"rounded-l-none\"\n                >\n                  <List className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Content Type Filters */}\n          <div className=\"flex flex-wrap gap-2 mt-4\">\n            {contentTypes.map((type) => {\n              const Icon = type.icon\n              return (\n                <Button\n                  key={type.id}\n                  variant={selectedType === type.id ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setSelectedType(type.id)}\n                  className=\"flex items-center space-x-2\"\n                >\n                  <Icon className=\"h-4 w-4\" />\n                  <span>{type.label}</span>\n                </Button>\n              )\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Content Grid/List */}\n      <div className={`grid gap-4 ${viewMode === 'grid' ? 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3' : 'grid-cols-1'}`}>\n        {filteredContent.map((item) => {\n          const TypeIcon = getTypeIcon(item.type)\n          return (\n            <Card key={item.id} className=\"hover:shadow-md transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <TypeIcon className=\"h-5 w-5 text-primary-green\" />\n                    {item.verified && (\n                      <div className=\"w-2 h-2 bg-primary-green rounded-full\" title=\"Verified Content\" />\n                    )}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">{item.uploadedAt}</div>\n                </div>\n                <CardTitle className=\"text-lg leading-tight\">{item.title}</CardTitle>\n                <CardDescription>\n                  <div className=\"flex items-center justify-between\">\n                    <span>{item.course}</span>\n                    <span className=\"text-xs\">{item.size}</span>\n                  </div>\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">by {item.uploader}</span>\n                    <div className=\"flex items-center space-x-1\">\n                      <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                      <span>{item.rating}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Download className=\"h-4 w-4\" />\n                      <span>{item.downloads} downloads</span>\n                    </div>\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button size=\"sm\" className=\"flex-1\">\n                      <Eye className=\"h-4 w-4 mr-2\" />\n                      Preview\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Download\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )\n        })}\n      </div>\n\n      {/* Upload Modal Placeholder */}\n      {showUploadModal && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader>\n              <CardTitle>Upload Content</CardTitle>\n              <CardDescription>Share your study materials with the community</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Title</label>\n                <Input placeholder=\"Enter content title\" />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Course</label>\n                <Input placeholder=\"e.g., MATH 101, CS 201\" />\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">File</label>\n                <div className=\"border-2 border-dashed border-muted rounded-lg p-6 text-center\">\n                  <Upload className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Drag and drop your file here, or click to browse\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button onClick={() => setShowUploadModal(false)} variant=\"outline\" className=\"flex-1\">\n                  Cancel\n                </Button>\n                <Button className=\"flex-1\">Upload</Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  )\n}","size_bytes":10088},"src/pages/Dashboard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { useUserStats } from '@/hooks/useUserStats'\nimport { \n  BookOpen, \n  Brain, \n  FileText, \n  TrendingUp, \n  Clock,\n  Trophy,\n  Target,\n  Calendar,\n  Plus,\n  BookMarked\n} from 'lucide-react'\n\nexport default function Dashboard() {\n  const { stats, isLoading, addActivity, addScheduleItem } = useUserStats()\n\n  const handleQuickAction = (action: string) => {\n    switch (action) {\n      case 'content':\n        addActivity({\n          type: 'study',\n          title: 'Browsed Content Library',\n          description: 'Explored available study materials'\n        })\n        break\n      case 'ai-tools':\n        addActivity({\n          type: 'study',\n          title: 'Used AI Study Tools',\n          description: 'Generated study materials with AI'\n        })\n        break\n      case 'exams':\n        addActivity({\n          type: 'exam',\n          title: 'Started Practice Exam',\n          description: 'Began working on practice questions'\n        })\n        break\n      default:\n        break\n    }\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center space-y-2\">\n          <h1 className=\"text-3xl font-bold text-dark-navy\">Loading Dashboard...</h1>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                <div className=\"h-6 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Welcome Header */}\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-3xl font-bold text-dark-navy\">Welcome back, Student!</h1>\n        <p className=\"text-muted-foreground\">Ready to accelerate your learning journey?</p>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Study Streak</CardTitle>\n            <Trophy className=\"h-4 w-4 text-primary-green\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.studyStreak} days</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats.studyStreak > 0 ? 'Keep it up!' : 'Start your streak today!'}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Study Time</CardTitle>\n            <Clock className=\"h-4 w-4 text-teal\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalStudyTime}h</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats.totalStudyTime > 0 ? 'Great progress!' : 'Start studying to track time'}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Exam Average</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-primary-green\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.examAverage}%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats.examAverage > 0 ? 'Keep improving!' : 'Take an exam to see your average'}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Goals Completed</CardTitle>\n            <Target className=\"h-4 w-4 text-teal\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.goalsCompleted}/{stats.totalGoals}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats.totalGoals > 0 ? `${Math.round((stats.goalsCompleted / stats.totalGoals) * 100)}% complete` : 'Set your first goal!'}\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n          <CardDescription>Get started with your study session</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Button \n              className=\"h-16 flex flex-col space-y-2\" \n              asChild\n              onClick={() => handleQuickAction('content')}\n            >\n              <a href=\"/content\">\n                <BookOpen className=\"h-6 w-6\" />\n                <span>Browse Content</span>\n              </a>\n            </Button>\n            <Button \n              className=\"h-16 flex flex-col space-y-2\" \n              variant=\"secondary\" \n              asChild\n              onClick={() => handleQuickAction('ai-tools')}\n            >\n              <a href=\"/ai-tools\">\n                <Brain className=\"h-6 w-6\" />\n                <span>AI Study Tools</span>\n              </a>\n            </Button>\n            <Button \n              className=\"h-16 flex flex-col space-y-2\" \n              variant=\"outline\" \n              asChild\n              onClick={() => handleQuickAction('exams')}\n            >\n              <a href=\"/exams\">\n                <FileText className=\"h-6 w-6\" />\n                <span>Practice Exams</span>\n              </a>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Activity & Upcoming Tasks */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {stats.recentActivity.length === 0 ? (\n              <div className=\"text-center py-6\">\n                <BookMarked className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\n                <p className=\"text-sm text-muted-foreground\">No recent activity</p>\n                <p className=\"text-xs text-muted-foreground\">Start studying to see your activity here</p>\n              </div>\n            ) : (\n              stats.recentActivity.slice(0, 5).map((activity) => {\n                const getActivityColor = (type: string) => {\n                  switch (type) {\n                    case 'quiz': return 'bg-green-500'\n                    case 'exam': return 'bg-blue-500'\n                    case 'flashcards': return 'bg-purple-500'\n                    case 'upload': return 'bg-orange-500'\n                    default: return 'bg-primary-green'\n                  }\n                }\n\n                const timeAgo = (date: Date) => {\n                  const now = new Date()\n                  const diffMs = now.getTime() - date.getTime()\n                  const diffMins = Math.floor(diffMs / 60000)\n                  \n                  if (diffMins < 60) return `${diffMins} min ago`\n                  if (diffMins < 1440) return `${Math.floor(diffMins / 60)} hours ago`\n                  return `${Math.floor(diffMins / 1440)} days ago`\n                }\n\n                return (\n                  <div key={activity.id} className=\"flex items-center space-x-3\">\n                    <div className={`h-2 w-2 rounded-full ${getActivityColor(activity.type)}`}></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">{activity.title}</p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {activity.description} • {timeAgo(activity.timestamp)}\n                        {activity.score && ` • Score: ${activity.score}%`}\n                      </p>\n                    </div>\n                  </div>\n                )\n              })\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle>Today's Schedule</CardTitle>\n            <Button \n              size=\"sm\" \n              variant=\"outline\"\n              onClick={() => {\n                const time = prompt('Enter time (e.g., 2:00 PM - 3:00 PM):')\n                const title = prompt('Enter task title:')\n                if (time && title) {\n                  addScheduleItem({ title, time, type: 'study' })\n                }\n              }}\n            >\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {stats.todaySchedule.length === 0 ? (\n              <div className=\"text-center py-6\">\n                <Calendar className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\n                <p className=\"text-sm text-muted-foreground\">No scheduled tasks</p>\n                <p className=\"text-xs text-muted-foreground\">Click the + button to add tasks</p>\n              </div>\n            ) : (\n              stats.todaySchedule.map((task) => {\n                const getTaskColor = (type: string) => {\n                  switch (type) {\n                    case 'practice': return 'text-purple-600'\n                    case 'quiz': return 'text-green-600'\n                    case 'review': return 'text-orange-600'\n                    default: return 'text-primary-green'\n                  }\n                }\n\n                return (\n                  <div key={task.id} className=\"flex items-center space-x-3\">\n                    <Calendar className={`h-4 w-4 ${getTaskColor(task.type)}`} />\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">{task.title}</p>\n                      <p className=\"text-xs text-muted-foreground\">{task.time}</p>\n                    </div>\n                  </div>\n                )\n              })\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}","size_bytes":10519},"src/pages/ExamEngine.tsx":{"content":"import { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { \n  Clock, \n  CheckCircle, \n  AlertCircle, \n  Play, \n  Pause, \n  SkipForward,\n  Flag,\n  FileText,\n  Trophy,\n  Target,\n  BookOpen\n} from 'lucide-react'\n\nconst sampleExam = {\n  id: 1,\n  title: 'Biology Midterm Practice',\n  description: 'Comprehensive test covering chapters 1-8',\n  duration: 60, // minutes\n  totalQuestions: 25,\n  questions: [\n    {\n      id: 1,\n      question: 'What is the primary function of mitochondria in a cell?',\n      type: 'multiple-choice',\n      options: [\n        'Protein synthesis',\n        'Energy production (ATP synthesis)',\n        'DNA replication',\n        'Waste removal'\n      ],\n      correctAnswer: 1,\n      explanation: 'Mitochondria are known as the powerhouse of the cell because they produce ATP through cellular respiration.'\n    },\n    {\n      id: 2,\n      question: 'The process of photosynthesis occurs in which part of the plant cell?',\n      type: 'multiple-choice',\n      options: [\n        'Nucleus',\n        'Mitochondria',\n        'Chloroplasts',\n        'Ribosomes'\n      ],\n      correctAnswer: 2,\n      explanation: 'Chloroplasts contain chlorophyll and are the sites where photosynthesis takes place.'\n    },\n    {\n      id: 3,\n      question: 'DNA replication is semi-conservative.',\n      type: 'true-false',\n      options: ['True', 'False'],\n      correctAnswer: 0,\n      explanation: 'DNA replication is semi-conservative, meaning each new strand contains one original and one newly synthesized strand.'\n    }\n  ]\n}\n\nexport default function ExamEngine() {\n  const [examState, setExamState] = useState<'setup' | 'active' | 'completed'>('setup')\n  const [currentQuestion, setCurrentQuestion] = useState(0)\n  const [answers, setAnswers] = useState<Record<number, number>>({})\n  const [timeRemaining, setTimeRemaining] = useState(sampleExam.duration * 60) // in seconds\n  const [isPaused, setIsPaused] = useState(false)\n  const [flaggedQuestions, setFlaggedQuestions] = useState<Set<number>>(new Set())\n  const [showResults, setShowResults] = useState(false)\n\n  // Timer effect\n  useEffect(() => {\n    if (examState === 'active' && !isPaused && timeRemaining > 0) {\n      const timer = setInterval(() => {\n        setTimeRemaining(prev => {\n          if (prev <= 1) {\n            setExamState('completed')\n            return 0\n          }\n          return prev - 1\n        })\n      }, 1000)\n      return () => clearInterval(timer)\n    }\n  }, [examState, isPaused, timeRemaining])\n\n  const formatTime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600)\n    const mins = Math.floor((seconds % 3600) / 60)\n    const secs = seconds % 60\n    if (hours > 0) {\n      return `${hours}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`\n    }\n    return `${mins}:${secs.toString().padStart(2, '0')}`\n  }\n\n  const startExam = () => {\n    setExamState('active')\n  }\n\n  const submitExam = () => {\n    setExamState('completed')\n    setShowResults(true)\n  }\n\n  const handleAnswerSelect = (questionId: number, answerIndex: number) => {\n    setAnswers(prev => ({\n      ...prev,\n      [questionId]: answerIndex\n    }))\n  }\n\n  const toggleFlag = (questionId: number) => {\n    setFlaggedQuestions(prev => {\n      const newSet = new Set(prev)\n      if (newSet.has(questionId)) {\n        newSet.delete(questionId)\n      } else {\n        newSet.add(questionId)\n      }\n      return newSet\n    })\n  }\n\n  const calculateScore = () => {\n    let correct = 0\n    sampleExam.questions.forEach(q => {\n      if (answers[q.id] === q.correctAnswer) {\n        correct++\n      }\n    })\n    return {\n      correct,\n      total: sampleExam.questions.length,\n      percentage: Math.round((correct / sampleExam.questions.length) * 100)\n    }\n  }\n\n  if (examState === 'setup') {\n    return (\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        <Card>\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl\">{sampleExam.title}</CardTitle>\n            <CardDescription>{sampleExam.description}</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-center\">\n              <div className=\"space-y-2\">\n                <Clock className=\"h-8 w-8 mx-auto text-primary-green\" />\n                <div>\n                  <p className=\"font-medium\">Duration</p>\n                  <p className=\"text-muted-foreground\">{sampleExam.duration} minutes</p>\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <FileText className=\"h-8 w-8 mx-auto text-primary-green\" />\n                <div>\n                  <p className=\"font-medium\">Questions</p>\n                  <p className=\"text-muted-foreground\">{sampleExam.totalQuestions} questions</p>\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Target className=\"h-8 w-8 mx-auto text-primary-green\" />\n                <div>\n                  <p className=\"font-medium\">Passing Score</p>\n                  <p className=\"text-muted-foreground\">70%</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-accent/50 p-4 rounded-lg\">\n              <h3 className=\"font-medium mb-2\">Instructions:</h3>\n              <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                <li>• You have {sampleExam.duration} minutes to complete this exam</li>\n                <li>• You can navigate between questions using the next/previous buttons</li>\n                <li>• Flag questions to review them later</li>\n                <li>• Make sure to submit your exam before time runs out</li>\n                <li>• Once submitted, you cannot change your answers</li>\n              </ul>\n            </div>\n\n            <div className=\"text-center\">\n              <Button onClick={startExam} size=\"lg\">\n                <Play className=\"h-5 w-5 mr-2\" />\n                Start Exam\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  if (examState === 'completed' && showResults) {\n    const score = calculateScore()\n    return (\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        <Card>\n          <CardHeader className=\"text-center\">\n            <div className={`w-16 h-16 mx-auto rounded-full flex items-center justify-center mb-4 ${\n              score.percentage >= 70 ? 'bg-green-100' : 'bg-red-100'\n            }`}>\n              {score.percentage >= 70 ? (\n                <Trophy className=\"h-8 w-8 text-green-600\" />\n              ) : (\n                <AlertCircle className=\"h-8 w-8 text-red-600\" />\n              )}\n            </div>\n            <CardTitle className=\"text-2xl\">Exam Complete!</CardTitle>\n            <CardDescription>\n              {score.percentage >= 70 ? 'Congratulations! You passed!' : 'Keep studying and try again!'}\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold text-primary-green mb-2\">\n                {score.percentage}%\n              </div>\n              <p className=\"text-muted-foreground\">\n                {score.correct} out of {score.total} questions correct\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                <CheckCircle className=\"h-6 w-6 mx-auto text-green-600 mb-2\" />\n                <p className=\"font-medium\">Correct</p>\n                <p className=\"text-2xl font-bold text-green-600\">{score.correct}</p>\n              </div>\n              <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n                <AlertCircle className=\"h-6 w-6 mx-auto text-red-600 mb-2\" />\n                <p className=\"font-medium\">Incorrect</p>\n                <p className=\"text-2xl font-bold text-red-600\">{score.total - score.correct}</p>\n              </div>\n              <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                <Clock className=\"h-6 w-6 mx-auto text-blue-600 mb-2\" />\n                <p className=\"font-medium\">Time Used</p>\n                <p className=\"text-2xl font-bold text-blue-600\">\n                  {formatTime((sampleExam.duration * 60) - timeRemaining)}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex gap-4 justify-center\">\n              <Button variant=\"outline\">\n                <BookOpen className=\"h-4 w-4 mr-2\" />\n                Review Answers\n              </Button>\n              <Button>\n                <Play className=\"h-4 w-4 mr-2\" />\n                Retake Exam\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  const currentQ = sampleExam.questions[currentQuestion]\n  const progress = ((currentQuestion + 1) / sampleExam.questions.length) * 100\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Header with timer and progress */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"text-2xl font-bold text-primary-green\">\n                {formatTime(timeRemaining)}\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setIsPaused(!isPaused)}\n              >\n                {isPaused ? <Play className=\"h-4 w-4\" /> : <Pause className=\"h-4 w-4\" />}\n              </Button>\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground\">Question</p>\n              <p className=\"font-medium\">{currentQuestion + 1} of {sampleExam.questions.length}</p>\n            </div>\n\n            <Button onClick={submitExam} variant=\"outline\">\n              Submit Exam\n            </Button>\n          </div>\n          \n          <div className=\"mt-4\">\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div \n                className=\"bg-primary-green h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${progress}%` }}\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Question */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-start justify-between\">\n            <CardTitle className=\"text-lg\">\n              Question {currentQuestion + 1}\n            </CardTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => toggleFlag(currentQ.id)}\n              className={flaggedQuestions.has(currentQ.id) ? 'text-yellow-600' : ''}\n            >\n              <Flag className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <CardDescription className=\"text-base\">\n            {currentQ.question}\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {currentQ.options.map((option, index) => (\n            <label\n              key={index}\n              className={`flex items-center space-x-3 p-4 border rounded-lg cursor-pointer transition-colors ${\n                answers[currentQ.id] === index\n                  ? 'border-primary-green bg-primary-green/10'\n                  : 'hover:bg-accent'\n              }`}\n            >\n              <input\n                type=\"radio\"\n                name={`question-${currentQ.id}`}\n                checked={answers[currentQ.id] === index}\n                onChange={() => handleAnswerSelect(currentQ.id, index)}\n                className=\"text-primary-green\"\n              />\n              <span>{option}</span>\n            </label>\n          ))}\n        </CardContent>\n      </Card>\n\n      {/* Navigation */}\n      <div className=\"flex justify-between\">\n        <Button\n          variant=\"outline\"\n          onClick={() => setCurrentQuestion(Math.max(0, currentQuestion - 1))}\n          disabled={currentQuestion === 0}\n        >\n          Previous\n        </Button>\n\n        <Button\n          onClick={() => setCurrentQuestion(Math.min(sampleExam.questions.length - 1, currentQuestion + 1))}\n          disabled={currentQuestion === sampleExam.questions.length - 1}\n        >\n          Next\n          <SkipForward className=\"h-4 w-4 ml-2\" />\n        </Button>\n      </div>\n\n      {/* Question Navigator */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-sm\">Question Navigator</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-10 gap-2\">\n            {sampleExam.questions.map((_, index) => (\n              <Button\n                key={index}\n                variant={currentQuestion === index ? \"default\" : \"outline\"}\n                size=\"sm\"\n                className={`relative ${\n                  answers[sampleExam.questions[index].id] !== undefined\n                    ? 'bg-green-100 border-green-300'\n                    : ''\n                } ${\n                  flaggedQuestions.has(sampleExam.questions[index].id)\n                    ? 'after:content-[\"🚩\"] after:absolute after:-top-1 after:-right-1 after:text-xs'\n                    : ''\n                }`}\n                onClick={() => setCurrentQuestion(index)}\n              >\n                {index + 1}\n              </Button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":13815},"src/pages/LearningPaths.tsx":{"content":"import { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { \n  Plus, \n  Calendar, \n  Clock, \n  Target, \n  CheckCircle, \n  Circle, \n  TrendingUp,\n  Book,\n  Brain,\n  FileText,\n  Award,\n  Play,\n  Pause,\n  RotateCcw\n} from 'lucide-react'\n\nconst samplePaths = [\n  {\n    id: 1,\n    title: 'Biology Midterm Preparation',\n    description: 'Complete study plan for Biology midterm covering chapters 1-8',\n    targetDate: '2024-11-15',\n    dailyHours: 2,\n    progress: 68,\n    totalTasks: 12,\n    completedTasks: 8,\n    topics: ['Cell Biology', 'Genetics', 'Evolution', 'Ecology'],\n    status: 'active',\n    tasks: [\n      { id: 1, title: 'Review Cell Structure', type: 'study', duration: 60, completed: true, dueDate: '2024-10-20' },\n      { id: 2, title: 'Practice Genetics Problems', type: 'practice', duration: 90, completed: true, dueDate: '2024-10-21' },\n      { id: 3, title: 'Take Evolution Quiz', type: 'quiz', duration: 30, completed: false, dueDate: '2024-10-22' },\n      { id: 4, title: 'Study Ecology Notes', type: 'study', duration: 75, completed: false, dueDate: '2024-10-23' },\n    ]\n  },\n  {\n    id: 2,\n    title: 'Calculus Final Exam Prep',\n    description: 'Comprehensive review for Calculus II final examination',\n    targetDate: '2024-12-10',\n    dailyHours: 3,\n    progress: 25,\n    totalTasks: 20,\n    completedTasks: 5,\n    topics: ['Integration', 'Series', 'Differential Equations'],\n    status: 'active',\n    tasks: []\n  },\n  {\n    id: 3,\n    title: 'Chemistry Chapter Review',\n    description: 'Review completed - Organic Chemistry fundamentals',\n    targetDate: '2024-10-15',\n    dailyHours: 1.5,\n    progress: 100,\n    totalTasks: 8,\n    completedTasks: 8,\n    topics: ['Organic Reactions', 'Mechanisms', 'Stereochemistry'],\n    status: 'completed',\n    tasks: []\n  }\n]\n\nconst taskTypes = {\n  study: { icon: Book, color: 'bg-blue-500', label: 'Study' },\n  practice: { icon: Brain, color: 'bg-purple-500', label: 'Practice' },\n  quiz: { icon: FileText, color: 'bg-green-500', label: 'Quiz' },\n  review: { icon: RotateCcw, color: 'bg-orange-500', label: 'Review' },\n}\n\nexport default function LearningPaths() {\n  const [selectedPath, setSelectedPath] = useState<number | null>(null)\n  const [showCreateForm, setShowCreateForm] = useState(false)\n\n  const selectedPathData = selectedPath ? samplePaths.find(p => p.id === selectedPath) : null\n\n  const getDaysUntilTarget = (targetDate: string) => {\n    const today = new Date()\n    const target = new Date(targetDate)\n    const diffTime = target.getTime() - today.getTime()\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))\n    return diffDays\n  }\n\n  if (showCreateForm) {\n    return (\n      <div className=\"max-w-2xl mx-auto space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold text-dark-navy\">Create Learning Path</h1>\n          <Button variant=\"outline\" onClick={() => setShowCreateForm(false)}>\n            Cancel\n          </Button>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>New Learning Path</CardTitle>\n            <CardDescription>Create a personalized study schedule to reach your goals</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Path Title</label>\n                <Input placeholder=\"e.g., Biology Midterm Prep\" />\n              </div>\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Target Date</label>\n                <Input type=\"date\" />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Description</label>\n              <textarea \n                className=\"w-full p-3 border rounded-md\"\n                placeholder=\"Describe your learning goals...\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Daily Study Hours</label>\n                <Input type=\"number\" placeholder=\"2\" min=\"0.5\" max=\"12\" step=\"0.5\" />\n              </div>\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Difficulty Level</label>\n                <select className=\"w-full p-2 border rounded-md\">\n                  <option value=\"beginner\">Beginner</option>\n                  <option value=\"intermediate\">Intermediate</option>\n                  <option value=\"advanced\">Advanced</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Topics to Cover</label>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                {['Cell Biology', 'Genetics', 'Evolution', 'Ecology', 'Biochemistry', 'Physiology'].map(topic => (\n                  <label key={topic} className=\"flex items-center space-x-2\">\n                    <input type=\"checkbox\" className=\"rounded\" />\n                    <span className=\"text-sm\">{topic}</span>\n                  </label>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"flex gap-4\">\n              <Button className=\"flex-1\">\n                <Target className=\"h-4 w-4 mr-2\" />\n                Create Learning Path\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  if (selectedPath) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <Button variant=\"outline\" onClick={() => setSelectedPath(null)}>\n            ← Back to Learning Paths\n          </Button>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Pause className=\"h-4 w-4 mr-2\" />\n              Pause\n            </Button>\n            <Button size=\"sm\">\n              <Play className=\"h-4 w-4 mr-2\" />\n              Continue\n            </Button>\n          </div>\n        </div>\n\n        {selectedPathData && (\n          <>\n            {/* Path Overview */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle className=\"text-2xl\">{selectedPathData.title}</CardTitle>\n                    <CardDescription className=\"mt-2\">{selectedPathData.description}</CardDescription>\n                  </div>\n                  <div className={`px-3 py-1 rounded-full text-xs font-medium ${\n                    selectedPathData.status === 'completed' ? 'bg-green-100 text-green-800' :\n                    selectedPathData.status === 'active' ? 'bg-blue-100 text-blue-800' :\n                    'bg-gray-100 text-gray-800'\n                  }`}>\n                    {selectedPathData.status}\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n                  <div className=\"text-center\">\n                    <Target className=\"h-6 w-6 mx-auto mb-2 text-primary-green\" />\n                    <p className=\"text-sm text-muted-foreground\">Progress</p>\n                    <p className=\"text-xl font-bold\">{selectedPathData.progress}%</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <Calendar className=\"h-6 w-6 mx-auto mb-2 text-blue-600\" />\n                    <p className=\"text-sm text-muted-foreground\">Days Left</p>\n                    <p className=\"text-xl font-bold\">{getDaysUntilTarget(selectedPathData.targetDate)}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <Clock className=\"h-6 w-6 mx-auto mb-2 text-purple-600\" />\n                    <p className=\"text-sm text-muted-foreground\">Daily Hours</p>\n                    <p className=\"text-xl font-bold\">{selectedPathData.dailyHours}h</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <CheckCircle className=\"h-6 w-6 mx-auto mb-2 text-green-600\" />\n                    <p className=\"text-sm text-muted-foreground\">Tasks Done</p>\n                    <p className=\"text-xl font-bold\">{selectedPathData.completedTasks}/{selectedPathData.totalTasks}</p>\n                  </div>\n                </div>\n\n                <div className=\"mb-4\">\n                  <div className=\"flex justify-between text-sm mb-2\">\n                    <span>Overall Progress</span>\n                    <span>{selectedPathData.progress}%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                    <div \n                      className=\"bg-primary-green h-3 rounded-full transition-all duration-300\"\n                      style={{ width: `${selectedPathData.progress}%` }}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex flex-wrap gap-2\">\n                  {selectedPathData.topics.map(topic => (\n                    <span key={topic} className=\"px-3 py-1 bg-accent rounded-full text-sm\">\n                      {topic}\n                    </span>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Today's Tasks */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Today's Tasks</CardTitle>\n                <CardDescription>Focus on these tasks to stay on track</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {selectedPathData.tasks.map((task) => {\n                    const TaskIcon = taskTypes[task.type as keyof typeof taskTypes]?.icon || Book\n                    const taskColor = taskTypes[task.type as keyof typeof taskTypes]?.color || 'bg-gray-500'\n                    \n                    return (\n                      <div key={task.id} className={`flex items-center space-x-4 p-4 border rounded-lg ${\n                        task.completed ? 'bg-green-50 border-green-200' : 'hover:bg-accent'\n                      }`}>\n                        <div className={`p-2 rounded-lg ${taskColor}`}>\n                          <TaskIcon className=\"h-4 w-4 text-white\" />\n                        </div>\n                        \n                        <div className=\"flex-1\">\n                          <h4 className={`font-medium ${task.completed ? 'line-through text-muted-foreground' : ''}`}>\n                            {task.title}\n                          </h4>\n                          <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                            <span className=\"flex items-center\">\n                              <Clock className=\"h-3 w-3 mr-1\" />\n                              {task.duration} min\n                            </span>\n                            <span className=\"flex items-center\">\n                              <Calendar className=\"h-3 w-3 mr-1\" />\n                              Due {task.dueDate}\n                            </span>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center space-x-2\">\n                          {task.completed ? (\n                            <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                          ) : (\n                            <Button size=\"sm\">\n                              Start Task\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    )\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          </>\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-dark-navy\">Learning Paths</h1>\n          <p className=\"text-muted-foreground\">Structured study plans to achieve your academic goals</p>\n        </div>\n        <Button onClick={() => setShowCreateForm(true)}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Path\n        </Button>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <TrendingUp className=\"h-8 w-8 mx-auto mb-2 text-primary-green\" />\n            <p className=\"text-sm text-muted-foreground\">Active Paths</p>\n            <p className=\"text-2xl font-bold\">2</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <Award className=\"h-8 w-8 mx-auto mb-2 text-yellow-600\" />\n            <p className=\"text-sm text-muted-foreground\">Completed</p>\n            <p className=\"text-2xl font-bold\">1</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <Target className=\"h-8 w-8 mx-auto mb-2 text-blue-600\" />\n            <p className=\"text-sm text-muted-foreground\">Avg. Progress</p>\n            <p className=\"text-2xl font-bold\">64%</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <Clock className=\"h-8 w-8 mx-auto mb-2 text-purple-600\" />\n            <p className=\"text-sm text-muted-foreground\">Study Hours</p>\n            <p className=\"text-2xl font-bold\">45h</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Learning Paths Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {samplePaths.map((path) => (\n          <Card \n            key={path.id} \n            className=\"hover:shadow-lg transition-shadow cursor-pointer\"\n            onClick={() => setSelectedPath(path.id)}\n          >\n            <CardHeader>\n              <div className=\"flex items-start justify-between\">\n                <CardTitle className=\"text-lg\">{path.title}</CardTitle>\n                <div className={`px-2 py-1 rounded-full text-xs font-medium ${\n                  path.status === 'completed' ? 'bg-green-100 text-green-800' :\n                  path.status === 'active' ? 'bg-blue-100 text-blue-800' :\n                  'bg-gray-100 text-gray-800'\n                }`}>\n                  {path.status}\n                </div>\n              </div>\n              <CardDescription>{path.description}</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {/* Progress Bar */}\n                <div>\n                  <div className=\"flex justify-between text-sm mb-2\">\n                    <span>Progress</span>\n                    <span>{path.progress}%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className={`h-2 rounded-full transition-all duration-300 ${\n                        path.status === 'completed' ? 'bg-green-500' : 'bg-primary-green'\n                      }`}\n                      style={{ width: `${path.progress}%` }}\n                    />\n                  </div>\n                </div>\n\n                {/* Stats */}\n                <div className=\"grid grid-cols-2 gap-4 text-center\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Tasks</p>\n                    <p className=\"font-medium\">{path.completedTasks}/{path.totalTasks}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Daily Hours</p>\n                    <p className=\"font-medium\">{path.dailyHours}h</p>\n                  </div>\n                </div>\n\n                {/* Topics */}\n                <div className=\"flex flex-wrap gap-1\">\n                  {path.topics.slice(0, 3).map(topic => (\n                    <span key={topic} className=\"px-2 py-1 bg-accent rounded text-xs\">\n                      {topic}\n                    </span>\n                  ))}\n                  {path.topics.length > 3 && (\n                    <span className=\"px-2 py-1 bg-accent rounded text-xs\">\n                      +{path.topics.length - 3} more\n                    </span>\n                  )}\n                </div>\n\n                {/* Target Date */}\n                <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                  <span>Target: {new Date(path.targetDate).toLocaleDateString()}</span>\n                  <span>{getDaysUntilTarget(path.targetDate)} days left</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  )\n}","size_bytes":17347},"src/pages/Subscription.tsx":{"content":"import { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { \n  Check, \n  Crown, \n  Zap, \n  Shield, \n  Users, \n  Infinity,\n  CreditCard,\n  Star,\n  Gift,\n  TrendingUp\n} from 'lucide-react'\n\nconst plans = [\n  {\n    id: 'free',\n    name: 'Free',\n    price: 0,\n    interval: 'forever',\n    description: 'Get started with basic features',\n    features: [\n      '5 AI requests per month',\n      '10 flashcard sets',\n      'Basic content upload (100MB)',\n      'Community content access',\n      'Basic analytics',\n    ],\n    limitations: [\n      'Limited AI tools usage',\n      'No advanced features',\n      'Standard support',\n    ],\n    buttonText: 'Current Plan',\n    popular: false,\n    color: 'border-gray-200',\n  },\n  {\n    id: 'pro',\n    name: 'Pro',\n    price: 9.99,\n    interval: 'month',\n    description: 'Perfect for serious students',\n    features: [\n      'Unlimited AI requests',\n      'Unlimited flashcard sets',\n      'Premium content upload (5GB)',\n      'Advanced analytics & insights',\n      'Priority customer support',\n      'Exam scheduling & reminders',\n      'Learning path optimization',\n      'Collaboration tools',\n    ],\n    limitations: [],\n    buttonText: 'Upgrade to Pro',\n    popular: true,\n    color: 'border-primary-green',\n  },\n  {\n    id: 'premium',\n    name: 'Premium',\n    price: 19.99,\n    interval: 'month',\n    description: 'For students who want everything',\n    features: [\n      'Everything in Pro',\n      'AI tutoring sessions',\n      'Unlimited storage (50GB)',\n      'Advanced mind mapping',\n      'Group study rooms',\n      'Institution partnerships',\n      'Personal study coach',\n      'Early access to new features',\n    ],\n    limitations: [],\n    buttonText: 'Upgrade to Premium',\n    popular: false,\n    color: 'border-purple-500',\n  },\n]\n\nconst testimonials = [\n  {\n    name: 'Sarah Chen',\n    role: 'Computer Science Student',\n    content: 'StudentDrive helped me increase my GPA from 3.2 to 3.8 in just one semester!',\n    rating: 5,\n  },\n  {\n    name: 'Michael Rodriguez',\n    role: 'Pre-Med Student',\n    content: 'The AI flashcards feature is incredible. It saves me hours of study time.',\n    rating: 5,\n  },\n  {\n    name: 'Emma Thompson',\n    role: 'Business Student',\n    content: 'Best investment I made for my education. The learning paths keep me organized.',\n    rating: 5,\n  },\n]\n\nexport default function Subscription() {\n  const [selectedPlan, setSelectedPlan] = useState('free')\n  const [billingInterval, setBillingInterval] = useState<'month' | 'year'>('month')\n  const [showPayment, setShowPayment] = useState(false)\n\n  const handleUpgrade = (planId: string) => {\n    setSelectedPlan(planId)\n    if (planId !== 'free') {\n      setShowPayment(true)\n    }\n  }\n\n  return (\n    <div className=\"space-y-12\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-4xl font-bold text-dark-navy\">Choose Your Plan</h1>\n        <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n          Unlock your full potential with premium features designed to accelerate your academic success\n        </p>\n        \n        {/* Billing Toggle */}\n        <div className=\"flex items-center justify-center space-x-4\">\n          <span className={`text-sm ${billingInterval === 'month' ? 'font-medium' : 'text-muted-foreground'}`}>\n            Monthly\n          </span>\n          <button\n            onClick={() => setBillingInterval(billingInterval === 'month' ? 'year' : 'month')}\n            className=\"relative inline-flex h-6 w-11 items-center rounded-full bg-gray-200 transition-colors hover:bg-gray-300\"\n          >\n            <span\n              className={`inline-block h-4 w-4 transform rounded-full bg-primary-green transition-transform ${\n                billingInterval === 'year' ? 'translate-x-6' : 'translate-x-1'\n              }`}\n            />\n          </button>\n          <span className={`text-sm ${billingInterval === 'year' ? 'font-medium' : 'text-muted-foreground'}`}>\n            Yearly\n          </span>\n          {billingInterval === 'year' && (\n            <span className=\"bg-green-100 text-green-800 text-xs font-medium px-2 py-1 rounded-full\">\n              Save 20%\n            </span>\n          )}\n        </div>\n      </div>\n\n      {/* Pricing Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-7xl mx-auto\">\n        {plans.map((plan) => {\n          const monthlyPrice = billingInterval === 'year' ? plan.price * 0.8 : plan.price\n          const yearlyPrice = monthlyPrice * 12\n          \n          return (\n            <Card\n              key={plan.id}\n              className={`relative ${plan.color} ${\n                plan.popular ? 'border-2 shadow-lg scale-105' : ''\n              } transition-all hover:shadow-lg`}\n            >\n              {plan.popular && (\n                <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                  <span className=\"bg-primary-green text-white px-3 py-1 rounded-full text-sm font-medium\">\n                    Most Popular\n                  </span>\n                </div>\n              )}\n              \n              <CardHeader className=\"text-center pb-6\">\n                <div className=\"mx-auto mb-4\">\n                  {plan.id === 'free' && <Gift className=\"h-8 w-8 text-gray-600\" />}\n                  {plan.id === 'pro' && <Zap className=\"h-8 w-8 text-primary-green\" />}\n                  {plan.id === 'premium' && <Crown className=\"h-8 w-8 text-purple-600\" />}\n                </div>\n                <CardTitle className=\"text-2xl\">{plan.name}</CardTitle>\n                <CardDescription className=\"text-base\">{plan.description}</CardDescription>\n                \n                <div className=\"mt-4\">\n                  {plan.price === 0 ? (\n                    <div className=\"text-3xl font-bold\">Free</div>\n                  ) : (\n                    <div className=\"text-center\">\n                      <div className=\"text-4xl font-bold\">\n                        ${billingInterval === 'year' ? yearlyPrice.toFixed(0) : monthlyPrice.toFixed(2)}\n                      </div>\n                      <div className=\"text-muted-foreground\">\n                        per {billingInterval === 'year' ? 'year' : 'month'}\n                      </div>\n                      {billingInterval === 'year' && (\n                        <div className=\"text-sm text-green-600 font-medium\">\n                          Save ${(plan.price * 12 - yearlyPrice).toFixed(0)} annually\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </CardHeader>\n\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  {plan.features.map((feature, index) => (\n                    <div key={index} className=\"flex items-start space-x-3\">\n                      <Check className=\"h-5 w-5 text-green-600 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-sm\">{feature}</span>\n                    </div>\n                  ))}\n                </div>\n\n                <Button\n                  className=\"w-full\"\n                  variant={plan.id === selectedPlan ? 'secondary' : 'default'}\n                  onClick={() => handleUpgrade(plan.id)}\n                  disabled={plan.id === selectedPlan}\n                >\n                  {plan.id === selectedPlan ? 'Current Plan' : plan.buttonText}\n                </Button>\n              </CardContent>\n            </Card>\n          )\n        })}\n      </div>\n\n      {/* Features Comparison */}\n      <div className=\"max-w-6xl mx-auto\">\n        <h2 className=\"text-2xl font-bold text-center mb-8\">Feature Comparison</h2>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full border-collapse\">\n            <thead>\n              <tr className=\"border-b\">\n                <th className=\"text-left p-4 font-medium\">Features</th>\n                <th className=\"text-center p-4 font-medium\">Free</th>\n                <th className=\"text-center p-4 font-medium\">Pro</th>\n                <th className=\"text-center p-4 font-medium\">Premium</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y\">\n              {[\n                { feature: 'AI Requests', free: '5/month', pro: 'Unlimited', premium: 'Unlimited' },\n                { feature: 'Storage', free: '100MB', pro: '5GB', premium: '50GB' },\n                { feature: 'Flashcard Sets', free: '10', pro: 'Unlimited', premium: 'Unlimited' },\n                { feature: 'Learning Paths', free: '❌', pro: '✅', premium: '✅' },\n                { feature: 'AI Tutoring', free: '❌', pro: '❌', premium: '✅' },\n                { feature: 'Group Study Rooms', free: '❌', pro: '❌', premium: '✅' },\n                { feature: 'Priority Support', free: '❌', pro: '✅', premium: '✅' },\n              ].map((row, index) => (\n                <tr key={index}>\n                  <td className=\"p-4 font-medium\">{row.feature}</td>\n                  <td className=\"p-4 text-center\">{row.free}</td>\n                  <td className=\"p-4 text-center\">{row.pro}</td>\n                  <td className=\"p-4 text-center\">{row.premium}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Testimonials */}\n      <div className=\"max-w-6xl mx-auto\">\n        <h2 className=\"text-2xl font-bold text-center mb-8\">What Students Are Saying</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {testimonials.map((testimonial, index) => (\n            <Card key={index}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  {[...Array(testimonial.rating)].map((_, i) => (\n                    <Star key={i} className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                  ))}\n                </div>\n                <p className=\"text-muted-foreground mb-4\">\"{testimonial.content}\"</p>\n                <div>\n                  <p className=\"font-medium\">{testimonial.name}</p>\n                  <p className=\"text-sm text-muted-foreground\">{testimonial.role}</p>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Payment Modal */}\n      {showPayment && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader>\n              <CardTitle>Complete Your Upgrade</CardTitle>\n              <CardDescription>\n                Upgrade to {plans.find(p => p.id === selectedPlan)?.name} plan\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"bg-accent p-4 rounded-lg\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"font-medium\">\n                    {plans.find(p => p.id === selectedPlan)?.name} Plan\n                  </span>\n                  <span className=\"font-bold\">\n                    ${plans.find(p => p.id === selectedPlan)?.price}/{billingInterval === 'year' ? 'year' : 'month'}\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Card Number</label>\n                  <div className=\"flex items-center space-x-2 p-3 border rounded-md\">\n                    <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n                    <input \n                      type=\"text\" \n                      placeholder=\"1234 5678 9012 3456\" \n                      className=\"flex-1 bg-transparent outline-none\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Expiry</label>\n                    <input \n                      type=\"text\" \n                      placeholder=\"MM/YY\" \n                      className=\"w-full p-3 border rounded-md\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">CVC</label>\n                    <input \n                      type=\"text\" \n                      placeholder=\"123\" \n                      className=\"w-full p-3 border rounded-md\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Cardholder Name</label>\n                  <input \n                    type=\"text\" \n                    placeholder=\"John Doe\" \n                    className=\"w-full p-3 border rounded-md\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button \n                  onClick={() => setShowPayment(false)} \n                  variant=\"outline\" \n                  className=\"flex-1\"\n                >\n                  Cancel\n                </Button>\n                <Button className=\"flex-1\">\n                  <Shield className=\"h-4 w-4 mr-2\" />\n                  Pay Securely\n                </Button>\n              </div>\n\n              <div className=\"text-xs text-center text-muted-foreground\">\n                🔒 Your payment information is secure and encrypted\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  )\n}","size_bytes":13863},"src/pages/index.ts":{"content":"export { default as Dashboard } from './Dashboard'\nexport * from './auth'","size_bytes":73},"src/components/layout/Layout.tsx":{"content":"import { useState } from 'react'\nimport { Outlet, useLocation } from 'react-router-dom'\nimport { Button } from '@/components/ui/button'\nimport { \n  Menu, \n  X, \n  Home, \n  BookOpen, \n  Brain, \n  FileText, \n  Clock, \n  CreditCard, \n  User,\n  LogOut\n} from 'lucide-react'\n\nexport default function Layout() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false)\n  const location = useLocation()\n\n  const navigation = [\n    { name: 'Dashboard', href: '/dashboard', icon: Home },\n    { name: 'Content Library', href: '/content', icon: BookOpen },\n    { name: 'AI Tools', href: '/ai-tools', icon: Brain },\n    { name: 'Exams', href: '/exams', icon: FileText },\n    { name: 'Learning Paths', href: '/learning-paths', icon: Clock },\n    { name: 'Subscription', href: '/subscription', icon: CreditCard },\n  ]\n\n  const isCurrentPath = (path: string) => {\n    return location.pathname === path || location.pathname.startsWith(path + '/')\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-50 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex h-16 items-center justify-between\">\n            {/* Logo */}\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"h-8 w-8 rounded-lg bg-primary-green flex items-center justify-center\">\n                <span className=\"text-white font-bold text-sm\">SD</span>\n              </div>\n              <span className=\"text-xl font-bold text-dark-navy\">StudentDrive</span>\n            </div>\n\n            {/* Desktop Navigation */}\n            <nav className=\"hidden md:flex items-center space-x-1\">\n              {navigation.map((item) => {\n                const Icon = item.icon\n                return (\n                  <Button\n                    key={item.name}\n                    variant={isCurrentPath(item.href) ? \"default\" : \"ghost\"}\n                    className=\"flex items-center space-x-2\"\n                    asChild\n                  >\n                    <a href={item.href}>\n                      <Icon className=\"h-4 w-4\" />\n                      <span>{item.name}</span>\n                    </a>\n                  </Button>\n                )\n              })}\n            </nav>\n\n            {/* User Menu & Mobile Toggle */}\n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"hidden md:flex\">\n                <User className=\"h-4 w-4\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"icon\" className=\"hidden md:flex\">\n                <LogOut className=\"h-4 w-4\" />\n              </Button>\n              \n              {/* Mobile menu button */}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"md:hidden\"\n                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              >\n                {isMobileMenuOpen ? <X className=\"h-4 w-4\" /> : <Menu className=\"h-4 w-4\" />}\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile Navigation */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden border-t\">\n            <div className=\"container mx-auto px-4 py-4\">\n              <nav className=\"space-y-2\">\n                {navigation.map((item) => {\n                  const Icon = item.icon\n                  return (\n                    <Button\n                      key={item.name}\n                      variant={isCurrentPath(item.href) ? \"default\" : \"ghost\"}\n                      className=\"w-full justify-start space-x-2\"\n                      asChild\n                      onClick={() => setIsMobileMenuOpen(false)}\n                    >\n                      <a href={item.href}>\n                        <Icon className=\"h-4 w-4\" />\n                        <span>{item.name}</span>\n                      </a>\n                    </Button>\n                  )\n                })}\n                <div className=\"border-t pt-2 mt-2\">\n                  <Button variant=\"ghost\" className=\"w-full justify-start space-x-2\">\n                    <User className=\"h-4 w-4\" />\n                    <span>Profile</span>\n                  </Button>\n                  <Button variant=\"ghost\" className=\"w-full justify-start space-x-2\">\n                    <LogOut className=\"h-4 w-4\" />\n                    <span>Sign Out</span>\n                  </Button>\n                </div>\n              </nav>\n            </div>\n          </div>\n        )}\n      </header>\n\n      {/* Main Content */}\n      <main className=\"container mx-auto px-4 py-6\">\n        <Outlet />\n      </main>\n    </div>\n  )\n}","size_bytes":4789},"src/pages/auth/Onboarding.tsx":{"content":"import { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { ChevronLeft, ChevronRight, GraduationCap } from 'lucide-react'\n\nconst onboardingSchema = z.object({\n  program: z.string().min(2, 'Program name is required'),\n  institution: z.string().min(2, 'Institution is required'),\n  level: z.enum(['undergraduate', 'graduate', 'professional']),\n  discoveredVia: z.string().min(1, 'Please tell us how you discovered StudentDrive'),\n  goals: z.array(z.string()).min(1, 'Please select at least one goal'),\n})\n\ntype OnboardingData = z.infer<typeof onboardingSchema>\n\nconst steps = [\n  { id: 'academic', title: 'Academic Info', description: 'Tell us about your studies' },\n  { id: 'goals', title: 'Learning Goals', description: 'What do you want to achieve?' },\n  { id: 'discovery', title: 'About You', description: 'Help us understand your needs' },\n]\n\nconst levelOptions = [\n  { value: 'undergraduate', label: 'Undergraduate' },\n  { value: 'graduate', label: 'Graduate/Masters' },\n  { value: 'professional', label: 'Professional/PhD' },\n]\n\nconst goalOptions = [\n  'Improve exam performance',\n  'Better study organization',\n  'Create effective flashcards',\n  'Generate study summaries',\n  'Track learning progress',\n  'Collaborate with peers',\n  'Time management',\n  'Research assistance',\n]\n\nconst discoveryOptions = [\n  'Social media',\n  'University website',\n  'Friend recommendation',\n  'Search engine',\n  'Academic advisor',\n  'Student forum',\n  'Conference/Event',\n  'Other',\n]\n\nexport default function Onboarding() {\n  const [currentStep, setCurrentStep] = useState(0)\n  const [selectedGoals, setSelectedGoals] = useState<string[]>([])\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    trigger,\n  } = useForm<OnboardingData>({\n    resolver: zodResolver(onboardingSchema),\n    defaultValues: {\n      goals: [],\n    },\n  })\n\n  const handleGoalToggle = (goal: string) => {\n    const newGoals = selectedGoals.includes(goal)\n      ? selectedGoals.filter(g => g !== goal)\n      : [...selectedGoals, goal]\n    \n    setSelectedGoals(newGoals)\n    setValue('goals', newGoals)\n  }\n\n  const nextStep = async () => {\n    let fieldsToValidate: (keyof OnboardingData)[] = []\n    \n    if (currentStep === 0) fieldsToValidate = ['program', 'institution', 'level']\n    if (currentStep === 1) fieldsToValidate = ['goals']\n    if (currentStep === 2) fieldsToValidate = ['discoveredVia']\n\n    const isValid = await trigger(fieldsToValidate)\n    if (isValid && currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1)\n    }\n  }\n\n  const prevStep = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1)\n    }\n  }\n\n  const onSubmit = (data: OnboardingData) => {\n    console.log('Onboarding data:', data)\n    // TODO: Submit to API and redirect to dashboard\n    window.location.href = '/dashboard'\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background px-4\">\n      <div className=\"w-full max-w-2xl space-y-6\">\n        {/* Header */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"mx-auto h-12 w-12 rounded-lg bg-primary-green flex items-center justify-center\">\n            <GraduationCap className=\"h-6 w-6 text-white\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-dark-navy\">Welcome to StudentDrive!</h1>\n          <p className=\"text-muted-foreground\">Let's personalize your learning experience</p>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"flex items-center justify-center space-x-2\">\n          {steps.map((step, index) => (\n            <div key={step.id} className=\"flex items-center\">\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                index <= currentStep \n                  ? 'bg-primary-green text-white' \n                  : 'bg-gray-200 text-gray-600'\n              }`}>\n                {index + 1}\n              </div>\n              {index < steps.length - 1 && (\n                <div className={`w-8 h-1 mx-2 ${\n                  index < currentStep ? 'bg-primary-green' : 'bg-gray-200'\n                }`} />\n              )}\n            </div>\n          ))}\n        </div>\n\n        {/* Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle>{steps[currentStep].title}</CardTitle>\n            <CardDescription>{steps[currentStep].description}</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n              {/* Step 1: Academic Info */}\n              {currentStep === 0 && (\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Program/Major</label>\n                    <Input\n                      placeholder=\"e.g., Computer Science, Biology, Business\"\n                      {...register('program')}\n                    />\n                    {errors.program && (\n                      <p className=\"text-sm text-destructive\">{errors.program.message}</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Institution</label>\n                    <Input\n                      placeholder=\"Your university or college name\"\n                      {...register('institution')}\n                    />\n                    {errors.institution && (\n                      <p className=\"text-sm text-destructive\">{errors.institution.message}</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Academic Level</label>\n                    <div className=\"grid grid-cols-1 gap-2\">\n                      {levelOptions.map((option) => (\n                        <label key={option.value} className=\"flex items-center space-x-3 p-3 border rounded-lg hover:bg-accent cursor-pointer\">\n                          <input\n                            type=\"radio\"\n                            value={option.value}\n                            {...register('level')}\n                            className=\"text-primary-green\"\n                          />\n                          <span>{option.label}</span>\n                        </label>\n                      ))}\n                    </div>\n                    {errors.level && (\n                      <p className=\"text-sm text-destructive\">{errors.level.message}</p>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {/* Step 2: Goals */}\n              {currentStep === 1 && (\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">What are your learning goals?</label>\n                    <p className=\"text-sm text-muted-foreground\">Select all that apply</p>\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2\">\n                      {goalOptions.map((goal) => (\n                        <label\n                          key={goal}\n                          className={`flex items-center space-x-3 p-3 border rounded-lg cursor-pointer transition-colors ${\n                            selectedGoals.includes(goal)\n                              ? 'border-primary-green bg-primary-green/10'\n                              : 'hover:bg-accent'\n                          }`}\n                        >\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedGoals.includes(goal)}\n                            onChange={() => handleGoalToggle(goal)}\n                            className=\"text-primary-green\"\n                          />\n                          <span className=\"text-sm\">{goal}</span>\n                        </label>\n                      ))}\n                    </div>\n                    {errors.goals && (\n                      <p className=\"text-sm text-destructive\">{errors.goals.message}</p>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {/* Step 3: Discovery */}\n              {currentStep === 2 && (\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">How did you discover StudentDrive?</label>\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2\">\n                      {discoveryOptions.map((option) => (\n                        <label key={option} className=\"flex items-center space-x-3 p-3 border rounded-lg hover:bg-accent cursor-pointer\">\n                          <input\n                            type=\"radio\"\n                            value={option}\n                            {...register('discoveredVia')}\n                            className=\"text-primary-green\"\n                          />\n                          <span>{option}</span>\n                        </label>\n                      ))}\n                    </div>\n                    {errors.discoveredVia && (\n                      <p className=\"text-sm text-destructive\">{errors.discoveredVia.message}</p>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {/* Navigation */}\n              <div className=\"flex justify-between pt-6\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={prevStep}\n                  disabled={currentStep === 0}\n                >\n                  <ChevronLeft className=\"h-4 w-4 mr-2\" />\n                  Previous\n                </Button>\n\n                {currentStep === steps.length - 1 ? (\n                  <Button type=\"submit\">\n                    Complete Setup\n                  </Button>\n                ) : (\n                  <Button type=\"button\" onClick={nextStep}>\n                    Next\n                    <ChevronRight className=\"h-4 w-4 ml-2\" />\n                  </Button>\n                )}\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}","size_bytes":10577},"src/pages/auth/SignIn.tsx":{"content":"import { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Eye, EyeOff } from 'lucide-react'\n\nexport default function SignIn() {\n  const [showPassword, setShowPassword] = useState(false)\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    rememberMe: false\n  })\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    // TODO: Implement sign in logic\n    console.log('Sign in:', formData)\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background px-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* Logo and Title */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"mx-auto h-12 w-12 rounded-lg bg-primary-green flex items-center justify-center\">\n            <span className=\"text-white font-bold text-lg\">SD</span>\n          </div>\n          <h1 className=\"text-2xl font-bold text-dark-navy\">Welcome back</h1>\n          <p className=\"text-muted-foreground\">Sign in to your StudentDrive account</p>\n        </div>\n\n        {/* Sign In Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Sign In</CardTitle>\n            <CardDescription>Enter your credentials to access your account</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <label htmlFor=\"email\" className=\"text-sm font-medium\">\n                  Email Address\n                </label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"your.email@university.edu\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <label htmlFor=\"password\" className=\"text-sm font-medium\">\n                  Password\n                </label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Enter your password\"\n                    value={formData.password}\n                    onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                    required\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute right-0 top-0 h-full w-12\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <label className=\"flex items-center space-x-2 text-sm\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.rememberMe}\n                    onChange={(e) => setFormData({ ...formData, rememberMe: e.target.checked })}\n                    className=\"rounded border-gray-300\"\n                  />\n                  <span>Remember me</span>\n                </label>\n                <a href=\"/auth/forgot-password\" className=\"text-sm text-primary hover:underline\">\n                  Forgot password?\n                </a>\n              </div>\n\n              <Button type=\"submit\" className=\"w-full\">\n                Sign In\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Don't have an account?{' '}\n                <a href=\"/auth/sign-up\" className=\"text-primary hover:underline\">\n                  Sign up\n                </a>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}","size_bytes":4255},"src/pages/auth/SignUp.tsx":{"content":"import { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Eye, EyeOff } from 'lucide-react'\n\nexport default function SignUp() {\n  const [showPassword, setShowPassword] = useState(false)\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false)\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    agreeToTerms: false\n  })\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    // TODO: Implement sign up logic\n    console.log('Sign up:', formData)\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background px-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* Logo and Title */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"mx-auto h-12 w-12 rounded-lg bg-primary-green flex items-center justify-center\">\n            <span className=\"text-white font-bold text-lg\">SD</span>\n          </div>\n          <h1 className=\"text-2xl font-bold text-dark-navy\">Join StudentDrive</h1>\n          <p className=\"text-muted-foreground\">Create your account to get started</p>\n        </div>\n\n        {/* Sign Up Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Create Account</CardTitle>\n            <CardDescription>Sign up with your university email</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <label htmlFor=\"name\" className=\"text-sm font-medium\">\n                  Full Name\n                </label>\n                <Input\n                  id=\"name\"\n                  type=\"text\"\n                  placeholder=\"John Doe\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <label htmlFor=\"email\" className=\"text-sm font-medium\">\n                  University Email Address\n                </label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"your.email@university.edu\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <label htmlFor=\"password\" className=\"text-sm font-medium\">\n                  Password\n                </label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Create a strong password\"\n                    value={formData.password}\n                    onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                    required\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute right-0 top-0 h-full w-12\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label htmlFor=\"confirmPassword\" className=\"text-sm font-medium\">\n                  Confirm Password\n                </label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"confirmPassword\"\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    placeholder=\"Confirm your password\"\n                    value={formData.confirmPassword}\n                    onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}\n                    required\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute right-0 top-0 h-full w-12\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  >\n                    {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-2\">\n                <input\n                  id=\"terms\"\n                  type=\"checkbox\"\n                  checked={formData.agreeToTerms}\n                  onChange={(e) => setFormData({ ...formData, agreeToTerms: e.target.checked })}\n                  className=\"mt-0.5 rounded border-gray-300\"\n                  required\n                />\n                <label htmlFor=\"terms\" className=\"text-sm text-muted-foreground\">\n                  I agree to the{' '}\n                  <a href=\"/terms\" className=\"text-primary hover:underline\">\n                    Terms of Service\n                  </a>{' '}\n                  and{' '}\n                  <a href=\"/privacy\" className=\"text-primary hover:underline\">\n                    Privacy Policy\n                  </a>\n                </label>\n              </div>\n\n              <Button type=\"submit\" className=\"w-full\">\n                Create Account\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Already have an account?{' '}\n                <a href=\"/auth/sign-in\" className=\"text-primary hover:underline\">\n                  Sign in\n                </a>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}","size_bytes":6175},"src/pages/auth/index.ts":{"content":"export { default as SignIn } from './SignIn'\nexport { default as SignUp } from './SignUp'","size_bytes":89}},"version":1}